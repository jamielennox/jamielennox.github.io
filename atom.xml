<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jamielennox.net]]></title>
  <link href="http://www.jamielennox.net/atom.xml" rel="self"/>
  <link href="http://www.jamielennox.net/"/>
  <updated>2016-04-12T13:03:24+10:00</updated>
  <id>http://www.jamielennox.net/</id>
  <author>
    <name><![CDATA[Jamie Lennox]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Os-http]]></title>
    <link href="http://www.jamielennox.net/blog/2016/04/12/os-http/"/>
    <updated>2016-04-12T12:57:25+10:00</updated>
    <id>http://www.jamielennox.net/blog/2016/04/12/os-http</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>Frequently doing OpenStack development I find myself wanting to query an API directly and observe the response.
This is a fairly common development task, but it&rsquo;s more complicated in OpenStack because there is an order in which you are supposed to make calls.
The ideal flow is:</p>

<ul>
<li>authenticate using credentials (username/password or a range of other mechanisms)</li>
<li>use the service catalog returned with authentication to find the endpoint for a service</li>
<li>find the API version URL you want from the service&rsquo;s endpoint</li>
<li>make a request to the versioned URL</li>
</ul>


<p>So we generally end up simply using a combination of curl and <a href="https://stedolan.github.io/jq/">jq</a> against a known endpoint with an existing token.
This pattern has existed for so long that the <code>--debug</code> output of most clients is actually in curl command form.
There are numerous drawbacks to this approach including:</p>

<ul>
<li>you have to manually refresh tokens when they expire.</li>
<li>you have to know the endpoints ahead of time.</li>
<li>for security reasons the actual token is no longer displayed so you can&rsquo;t simply copy the outputted curl command.</li>
<li>you have to remember all the curl/other tool commands for showing headers, readable output etc - YMMV on this but I always forget.</li>
</ul>


<h2>Introducing os-http</h2>

<p>os-http is an easy to use CLI tool for making requests against OpenStack endpoints correctly.
It&rsquo;s designed to allow developers to debug and inspect the responses of OpenStack REST APIs without having to manage the details of authentication, service catalog and version negotiation.
Its interface is 100% modelled on the excellent <a href="https://github.com/jkbrzt/httpie">httpie</a>.</p>

<p>I have recently added the 0.1 release to <a href="https://pypi.python.org/pypi/os-http/">pypi</a> and the source is available <a href="https://github.com/jamielennox/os-http">on my github</a> though it will probably migrate to the OpenStack infrastructure if it gains adoption.
It is released under the Apache 2 License.</p>

<p>It is still very raw and but I have been using it for some time and feel it may be useful for others.
It is also in fairly desperate need of documentation - contributions welcome.</p>

<h2>Example</h2>

<p>Because it&rsquo;s powered by <a href="https://pypi.python.org/pypi/os-client-config">os-client-config</a> the authentication configuration is what you would expect from using <a href="https://pypi.python.org/pypi/python-openstackclient">openstackclient</a>.
Documentation for preparing this authentication is available from both of these projects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">export OS_CLOUD=devstack</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are then a number of choices you can make for service discovery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">--os-service-type &lt;name&gt;    Service type to request from the catalog</span>
</span><span class='line'><span class="go">--os-service-name &lt;name&gt;    Service name to request from the catalog</span>
</span><span class='line'><span class="go">--os-interface &lt;name&gt;       API Interface to use [public, internal, admin]</span>
</span><span class='line'><span class="go">--os-region-name &lt;name&gt;     Region of the cloud to use</span>
</span><span class='line'><span class="go">--os-endpoint-override &lt;url&gt;  Endpoint to use instead of the endpoint in the catalog</span>
</span><span class='line'><span class="go">--os-api-version &lt;version&gt;  Which version of the service API to use</span>
</span></code></pre></td></tr></table></div></figure>


<p>As is standard for OpenStack clients these options are also able to be set via the corresponding OS_ environment varibles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">export OS_SERVICE_TYPE=image</span>
</span><span class='line'><span class="go">export OS_API_VERSION=2</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax for commands is then <code>os-http METHOD PATH [ITEM [ITEM]]</code>.
 <code>ITEM</code> currently only accepts headers in a <code>key:value</code> format but will support others in future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">jamie@devstack:~$</span> os-http get /images X-My-Header:Value
</span><span class='line'><span class="go">HTTP/1.1 200 OK</span>
</span><span class='line'><span class="go">Date: Tue, 12 Apr 2016 01:35:31 GMT</span>
</span><span class='line'><span class="go">Connection: keep-alive</span>
</span><span class='line'><span class="go">Content-Type: application/json; charset=UTF-8</span>
</span><span class='line'><span class="go">Content-Length: 1987</span>
</span><span class='line'><span class="go">X-Openstack-Request-Id: req-3f6e07e7-cd0d-4a90-9d8a-0024a4bc347f</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="go">{</span>
</span><span class='line'><span class="go">    &quot;first&quot;: &quot;/v2/images&quot;,</span>
</span><span class='line'><span class="go">    &quot;images&quot;: [</span>
</span><span class='line'><span class="go">        {</span>
</span><span class='line'><span class="go">            &quot;checksum&quot;: &quot;eb9139e4942121f22bbc2afc0400b2a4&quot;,</span>
</span><span class='line'><span class="go">            &quot;container_format&quot;: &quot;ami&quot;,</span>
</span><span class='line'><span class="go">            &quot;created_at&quot;: &quot;2016-03-08T01:56:59Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;disk_format&quot;: &quot;ami&quot;,</span>
</span><span class='line'><span class="go">            &quot;file&quot;: &quot;/v2/images/6c13a0e6-98a3-47fb-bee4-2e356668f7d9/file&quot;,</span>
</span><span class='line'><span class="go">            &quot;id&quot;: &quot;6c13a0e6-98a3-47fb-bee4-2e356668f7d9&quot;,</span>
</span><span class='line'><span class="go">            &quot;kernel_id&quot;: &quot;578a708b-d0de-4a28-bcd2-8627ad15a971&quot;,</span>
</span><span class='line'><span class="go">            &quot;min_disk&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;min_ram&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;name&quot;: &quot;cirros-0.3.4-x86_64-uec&quot;,</span>
</span><span class='line'><span class="go">            &quot;owner&quot;: &quot;1f04217930f34b4a92fb11457783f2c0&quot;,</span>
</span><span class='line'><span class="go">            &quot;protected&quot;: false,</span>
</span><span class='line'><span class="go">            &quot;ramdisk_id&quot;: &quot;0eaea69b-ebfd-40f3-bf86-13b8ad08462b&quot;,</span>
</span><span class='line'><span class="go">            &quot;schema&quot;: &quot;/v2/schemas/image&quot;,</span>
</span><span class='line'><span class="go">            &quot;self&quot;: &quot;/v2/images/6c13a0e6-98a3-47fb-bee4-2e356668f7d9&quot;,</span>
</span><span class='line'><span class="go">            &quot;size&quot;: 25165824,</span>
</span><span class='line'><span class="go">            &quot;status&quot;: &quot;active&quot;,</span>
</span><span class='line'><span class="go">            &quot;tags&quot;: [],</span>
</span><span class='line'><span class="go">            &quot;updated_at&quot;: &quot;2016-03-08T01:56:59Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;virtual_size&quot;: null,</span>
</span><span class='line'><span class="go">            &quot;visibility&quot;: &quot;public&quot;</span>
</span><span class='line'><span class="go">        },</span>
</span><span class='line'><span class="go">        {</span>
</span><span class='line'><span class="go">            &quot;checksum&quot;: &quot;be575a2b939972276ef675752936977f&quot;,</span>
</span><span class='line'><span class="go">            &quot;container_format&quot;: &quot;ari&quot;,</span>
</span><span class='line'><span class="go">            &quot;created_at&quot;: &quot;2016-03-08T01:56:57Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;disk_format&quot;: &quot;ari&quot;,</span>
</span><span class='line'><span class="go">            &quot;file&quot;: &quot;/v2/images/0eaea69b-ebfd-40f3-bf86-13b8ad08462b/file&quot;,</span>
</span><span class='line'><span class="go">            &quot;id&quot;: &quot;0eaea69b-ebfd-40f3-bf86-13b8ad08462b&quot;,</span>
</span><span class='line'><span class="go">            &quot;min_disk&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;min_ram&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;name&quot;: &quot;cirros-0.3.4-x86_64-uec-ramdisk&quot;,</span>
</span><span class='line'><span class="go">            &quot;owner&quot;: &quot;1f04217930f34b4a92fb11457783f2c0&quot;,</span>
</span><span class='line'><span class="go">            &quot;protected&quot;: false,</span>
</span><span class='line'><span class="go">            &quot;schema&quot;: &quot;/v2/schemas/image&quot;,</span>
</span><span class='line'><span class="go">            &quot;self&quot;: &quot;/v2/images/0eaea69b-ebfd-40f3-bf86-13b8ad08462b&quot;,</span>
</span><span class='line'><span class="go">            &quot;size&quot;: 3740163,</span>
</span><span class='line'><span class="go">            &quot;status&quot;: &quot;active&quot;,</span>
</span><span class='line'><span class="go">            &quot;tags&quot;: [],</span>
</span><span class='line'><span class="go">            &quot;updated_at&quot;: &quot;2016-03-08T01:56:57Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;virtual_size&quot;: null,</span>
</span><span class='line'><span class="go">            &quot;visibility&quot;: &quot;public&quot;</span>
</span><span class='line'><span class="go">        },</span>
</span><span class='line'><span class="go">        {</span>
</span><span class='line'><span class="go">            &quot;checksum&quot;: &quot;8a40c862b5735975d82605c1dd395796&quot;,</span>
</span><span class='line'><span class="go">            &quot;container_format&quot;: &quot;aki&quot;,</span>
</span><span class='line'><span class="go">            &quot;created_at&quot;: &quot;2016-03-08T01:56:54Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;disk_format&quot;: &quot;aki&quot;,</span>
</span><span class='line'><span class="go">            &quot;file&quot;: &quot;/v2/images/578a708b-d0de-4a28-bcd2-8627ad15a971/file&quot;,</span>
</span><span class='line'><span class="go">            &quot;id&quot;: &quot;578a708b-d0de-4a28-bcd2-8627ad15a971&quot;,</span>
</span><span class='line'><span class="go">            &quot;min_disk&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;min_ram&quot;: 0,</span>
</span><span class='line'><span class="go">            &quot;name&quot;: &quot;cirros-0.3.4-x86_64-uec-kernel&quot;,</span>
</span><span class='line'><span class="go">            &quot;owner&quot;: &quot;1f04217930f34b4a92fb11457783f2c0&quot;,</span>
</span><span class='line'><span class="go">            &quot;protected&quot;: false,</span>
</span><span class='line'><span class="go">            &quot;schema&quot;: &quot;/v2/schemas/image&quot;,</span>
</span><span class='line'><span class="go">            &quot;self&quot;: &quot;/v2/images/578a708b-d0de-4a28-bcd2-8627ad15a971&quot;,</span>
</span><span class='line'><span class="go">            &quot;size&quot;: 4979632,</span>
</span><span class='line'><span class="go">            &quot;status&quot;: &quot;active&quot;,</span>
</span><span class='line'><span class="go">            &quot;tags&quot;: [],</span>
</span><span class='line'><span class="go">            &quot;updated_at&quot;: &quot;2016-03-08T01:56:55Z&quot;,</span>
</span><span class='line'><span class="go">            &quot;virtual_size&quot;: null,</span>
</span><span class='line'><span class="go">            &quot;visibility&quot;: &quot;public&quot;</span>
</span><span class='line'><span class="go">        }</span>
</span><span class='line'><span class="go">    ],</span>
</span><span class='line'><span class="go">    &quot;schema&quot;: &quot;/v2/schemas/images&quot;</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>X-My-Header:Value</code> is purely for demonstration purposes and is ignored by glance.
As you can see the output is nicely formatted and in a console even includes some pygments magic for coloring.</p>

<h2>Caveats</h2>

<p>os-http is at version 0.1 and has many unimplemented or not quite right things.
Most notably:</p>

<ul>
<li><p>There is really only support for GET and other body-less requests.
Whilst you can specify PUT/POST or other to method there is currently no means to specify body data so the request will be empty.
This would be easy to add but I havent used it so I haven&rsquo;t implemented it - contributions welcome.</p></li>
<li><p>The output is intended to be easy for a developer to consume, not for a script to parse (though this may be considered in future).
It is not intended to be a replacement for the existing CLIs in scripts.
The default output may change to include any additional information that could be useful to developers.</p></li>
<li><p>Because os-http does requests &lsquo;correctly&rsquo; you may find that using &ndash;os-api-version gives errors - particularly with nova.
This is because for most installations the service catalog for nova points to a protected endpoint.
There is ongoing work upstream to fix the service catalog in general but for now os-http doesn&rsquo;t contain the hacks that clients do to work around poor setups.
Using this tool may lead you to discover just how many hacks there are.</p></li>
</ul>


<p>Please test it out and report any feedback or bugs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Auth in OpenStack Services]]></title>
    <link href="http://www.jamielennox.net/blog/2015/09/10/user-auth-in-openstack-services/"/>
    <updated>2015-09-10T15:19:24+10:00</updated>
    <id>http://www.jamielennox.net/blog/2015/09/10/user-auth-in-openstack-services</id>
    <content type="html"><![CDATA[<p>With auth plugins we are trying to ensure that an individual OpenStack service (like Nova or Glance) should never have to deal with the details of authentication.
One of the improvements we&rsquo;ve made that has gone largely unnoticed is the addition of the <strong>keystone.token_auth</strong> authentication plugin that is passed down in a request&rsquo;s environment variables from auth_token middleware.
This object is a full authentication plugin that uses the token and service catalog of the user that was just validated so that the service does the right thing without having to figure out keystone&rsquo;s token format.</p>

<p>This means that service to service communication is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">glanceclient</span> <span class="kn">import</span> <span class="n">client</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient</span> <span class="kn">import</span> <span class="n">session</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystonemiddleware</span> <span class="kn">import</span> <span class="n">auth_token</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">oslo_config</span> <span class="kn">import</span> <span class="n">cfg</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">webob.dec</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref</span> <span class="kn">import</span> <span class="n">simple_server</span>
</span><span class='line'>
</span><span class='line'><span class="n">cfg</span><span class="o">.</span><span class="n">CONF</span><span class="p">(</span><span class="n">project</span><span class="o">=</span><span class="s">&#39;testservice&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">register_conf_options</span><span class="p">(</span><span class="n">cfg</span><span class="o">.</span><span class="n">CONF</span><span class="p">,</span> <span class="s">&#39;communication&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">SESSION</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">load_from_conf_options</span><span class="p">(</span><span class="n">cfg</span><span class="o">.</span><span class="n">CONF</span><span class="p">,</span> <span class="s">&#39;communication&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@webob.dec.wsgify</span>
</span><span class='line'><span class="k">def</span> <span class="nf">app</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">glance</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">session</span><span class="o">=</span><span class="n">SESSION</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">auth</span><span class="o">=</span><span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;keystone.token_auth&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">webob</span><span class="o">.</span><span class="n">Response</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">glance</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">list</span><span class="p">()]))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">auth_token</span><span class="o">.</span><span class="n">AuthProtocol</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="n">simple_server</span><span class="o">.</span><span class="n">make_server</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a full service that responds to every request with a JSON formatted list of image names in your project which is not all that useful but proves a point. There are some things to notice:</p>

<h4>The session is global.</h4>

<p>There are two ways to use a session with authentication.</p>

<ul>
<li>If you are writing something like a CLI application then you will want to use the same authentication for the lifetime of the program and it can be easier to just pass an auth plugin to the sesion constructor and forget about it.</li>
<li>If you are writing a service that wants to use many different authentications over its lifetime you can pass the auth directly to the client that will consume it.</li>
</ul>


<p>In our case we want to re-use the session for benefits like connection pooling and caching, but we will often change the authentication being used so we pass the plugin to the client directly.
The session is thread safe and is able to be reused across requests like this.
Consider this to be splitting the application context and the request context.</p>

<h4>We create the glanceclient just in time.</h4>

<p>As a very small application this isn&rsquo;t obvious however because all the caching and authentication logic is being handled by the session and plugin there is no reason to keep a client around.
Clients become very cheap to create and so in most situations you can use a client object within a function and then discard it.</p>

<h4>We never entered a URL for Glance.</h4>

<p>At no point did we have to provide a URL for glance in the config file.
If on any project you encounter you have to enter a fixed URL to communicate with another service please file a bug.
Keystone tokens have a service catalog in them so that all requests made on behalf of a user go to the appropriate URL.
In the past this was a relatively ugly affair involving parsing the information from dictionaries, however this is all encapsulated into the auth plugin now.</p>

<h4>There is additional information on the plugin</h4>

<p>Whilst not shown in the example the auth_plugin has the following attributes:</p>

<ul>
<li>user.auth_token</li>
<li>user.user_id</li>
<li>user.user_domain_id</li>
<li>user.project_id</li>
<li>user.project_domain_id</li>
<li>user.trust_id</li>
<li>user.role_names</li>
</ul>


<p>If you are storing the auth plugin in a context using these accessors can be much easier that trying to figure out the variables that auth_token middleware also set.</p>

<h4>You can&rsquo;t serialize the auth plugin.</h4>

<p>In the case of Nova and others the auth_token middleware check is performed on the API service however most service communication is done in a backend service.
We currently have no way of serializing the plugin to an oslo.context so it is reconstructed on the backend.
This is something we are working on.</p>

<h4>It&rsquo;s available now</h4>

<p>Going back to look at the initial review it is 5 days shy of 1 year old (merged 2014-09-15).
There have been improvements since then however the basic functionality has been out for a while and is available in the current minimum global requirements.
Glanceclient on the other hand has only had session support since the 1.0 release (2015-08-31) so you will need a recent version to test the example.</p>

<h2>Conclusion</h2>

<p>We are doing all we can to prevent services ever having to deal with the details of authentication in OpenStack.
If your project has still not adopted plugins please come find us in #openstack-keystone on freenode as it&rsquo;s currently making your life more difficult.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up S4u2proxy]]></title>
    <link href="http://www.jamielennox.net/blog/2015/02/27/setting-up-s4u2proxy/"/>
    <updated>2015-02-27T18:48:11+11:00</updated>
    <id>http://www.jamielennox.net/blog/2015/02/27/setting-up-s4u2proxy</id>
    <content type="html"><![CDATA[<h2>Motivation:</h2>

<p>Kerberos authentication provides a good experience for allowing users to connect to a service.
However this authentication does not allow the user to take the received ticket and further communicate with another service.</p>

<p>The canonical example of this is when authenticating to a web service we want to use the same user credentials to authenticate with an LDAP service, rather than require credentials for the service itself.</p>

<p>In my specific case if I have a <a href="http://www.jamielennox.net/blog/2015/02/12/step-by-step-kerberized-keystone/">kerberized keystone</a> then when the user talks to Horizon I want to forward the user&rsquo;s ticket to authenticate with keystone.</p>

<p>The mechanism that allows us to forward these Kerberos tickets is called Service-for-User-to-Proxy or S4U2Proxy.
To mitigate some of the security issues with delegating user tickets there are strict controls over which services are allowed to forward tickets and to whom which have to be configured.</p>

<p>For a more in-depth explanation check out the <a href="#furtherreading">further reading</a> section at the end of this post.</p>

<h2>Scenario:</h2>

<p>I intend this guide to be a step by step tutorial into setting up a basic S4U2 proxying service that we can verify and give you enough information to go about setting up more complex delegations.
If you are just looking for the raw commands you can jump down to <a href="#delegation">Setting up the Delegation</a>.</p>

<p>I created 3 Centos 7 virtual machines on a private network:</p>

<ul>
<li>An IPA server at <code>ipa.s4u2.jamielennox.net</code></li>
<li>A service provider at <code>service.s4u2.jamielennox.net</code> that will provide the target service.</li>
<li>An S4U2 proxy service at <code>proxy.s4u2.jamielennox.net</code> that will accept a Kerberos ticket and forward it to <code>service.s4u2.jamielennox.net</code></li>
</ul>


<p>For this setup I am creating a testing realm called <code>S4U2.JAMIELENNOX.NET</code>.
I will post the setup that works for my environment and leave it up to you to recognize where you should use your own service names.</p>

<h2>Setting up IPA</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hostnamectl set-hostname ipa.s4u2.jamielennox.net
</span><span class='line'>yum install -y ipa-server bind-dyndb-ldap
</span><span class='line'>ipa-server-install</span></code></pre></td></tr></table></div></figure>


<p>I pick the option to enable DNS as I think it&rsquo;s easier, you can skip that but then you&rsquo;ll need to make <code>/etc/hosts</code> entries for each of the hosts.</p>

<h2>Setting up the Service</h2>

<p>We start by doing the basic configuration of the machine and setting it up as an IPA client machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hostnamectl <span class="nb">set</span>-hostname service.s4u2.jamielennox.net
</span><span class='line'>yum install -y ipa-client
</span><span class='line'>vim /etc/resolv.conf  <span class="c"># set DNS server to IPA IP address</span>
</span><span class='line'>ipa-client-install
</span><span class='line'>yum install -y httpd php mod_auth_kerb
</span><span class='line'>rm /etc/httpd/conf.d/welcome.conf  <span class="c"># a stub page that gets in the way</span>
</span></code></pre></td></tr></table></div></figure>


<p>Register that we will be exposing a HTTP service on the machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install -y ipa-admintools
</span><span class='line'>kinit admin
</span><span class='line'>ipa service-add HTTP/service.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET
</span></code></pre></td></tr></table></div></figure>


<p>Fetch the Kerberos keytab from IPA and make it accessible to Apache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ipa-getkeytab -s ipa.s4u2.jamielennox.net -p HTTP/service.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET -k /etc/httpd/conf/httpd.keytab
</span><span class='line'>chown apache: /etc/httpd/conf/httpd.keytab
</span></code></pre></td></tr></table></div></figure>


<p>Create a simple site that will display the environment variables the server has received.
I share most people&rsquo;s opinion of PHP, however for a simple diagnostic site it&rsquo;s hard to beat <code>phpinfo()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir /var/www/s4u2
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> &gt; /var/www/s4u2/index.php
</span></code></pre></td></tr></table></div></figure>


<p>Configure Apache to serve our simple PHP site behind Kerberos authentication.</p>

<figure class='code'><figcaption><span>/etc/httpd/conf.d/s4u2-service.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> service.s4u2.jamielennox.net
</span><span class='line'>
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="s2">&quot;/var/www/s4u2&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">&quot;/var/www/s4u2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Location</span> <span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">AuthType</span> Kerberos
</span><span class='line'>    <span class="nb">AuthName</span> <span class="s2">&quot;Kerberos Login&quot;</span>
</span><span class='line'>    <span class="nb">KrbMethodNegotiate</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">KrbMethodK5Passwd</span> <span class="k">off</span>
</span><span class='line'>    <span class="nb">KrbServiceName</span> HTTP
</span><span class='line'>    <span class="nb">KrbAuthRealms</span> S4U2.JAMIELENNOX.NET
</span><span class='line'>    <span class="nb">Krb5KeyTab</span> <span class="sx">/etc/httpd/conf/httpd.keytab</span>
</span><span class='line'>    <span class="nb">KrbSaveCredentials</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">KrbLocalUserMapping</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">Require</span> valid-user
</span><span class='line'>  <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">DirectoryIndex</span> index.php
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally restart Apache to bring up the service site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>systemctl restart httpd
</span></code></pre></td></tr></table></div></figure>


<h2>Setting up my local machine</h2>

<p>You could easily test all this using curl, however particularly as we are setting up HTTP to HTTP delegation the obvious use is going to be via the browser, so at this point I like to configure firefox to allow Kerberos negotiation.</p>

<p>I don&rsquo;t want my development machine to be an IPA client so I just configure the Kerberos KDC so that I can get a ticket on my machine with <code>kinit</code>.</p>

<p>Edit <code>/etc/krb5.conf</code> to add:</p>

<figure class='code'><figcaption><span>/etc/krb5.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[realms]</span>
</span><span class='line'> <span class="na">S4U2.JAMIELENNOX.NET</span> <span class="o">=</span> <span class="s">{</span>
</span><span class='line'><span class="s">  kdc = ipa.s4u2.jamielennox.net</span>
</span><span class='line'><span class="s">  admin_server = ipa.s4u2.jamielennox.net</span>
</span><span class='line'><span class="s"> }</span>
</span><span class='line'>
</span><span class='line'><span class="k">[domain_realms]</span>
</span><span class='line'> <span class="na">.s4u2.jamielennox.net</span> <span class="o">=</span> <span class="s">S4U2.JAMIELENNOX.NET</span>
</span><span class='line'><span class="s"> s4u2.jamielennox.net = S4U2.JAMIELENNOX.NET</span>
</span></code></pre></td></tr></table></div></figure>


<p>And because I don&rsquo;t want to rely on the DNS provided by this IPA server I&rsquo;ll need to add the service IPs to <code>/etc/hosts</code>:</p>

<figure class='code'><figcaption><span>/etc/hosts </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>10.16.19.24     service.s4u2.jamielennox.net
</span><span class='line'>10.16.19.100    proxy.s4u2.jamielennox.net
</span><span class='line'>10.16.19.101    ipa.s4u2.jamielennox.net
</span></code></pre></td></tr></table></div></figure>


<p>In firefox open the config page (type <code>about:config</code> into the URL bar) and set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">network.negotiate-auth.delegation-uris</span> <span class="o">=</span> <span class="s">.s4u2.jamielennox.net</span>
</span><span class='line'><span class="na">network.negotiate-auth.trusted-uris</span> <span class="o">=</span> <span class="s">.s4u2.jamielennox.net</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are comma seperated values so you can configure this in addition to any existing realms you might have configured.</p>

<p>To test get a ticket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kinit admin@S4U2.JAMIELENNOX.NET
</span></code></pre></td></tr></table></div></figure>


<p>I can now point firefox to <code>http://service.s4u2.jamielennox.net</code> and we see the <code>phpinfo()</code> dump of environment variables.
This means we have successfully set up our service host.</p>

<p>Interesting environment variables to check for to ensure this is correct are:</p>

<ul>
<li><code>REMOTE_USER admin</code> shows that the ticket belonged to the admin user.</li>
<li><code>AUTH_TYPE Negotiate</code> indicates that the user was authenticated via the Keberos mechanism.</li>
</ul>


<h2>Create Proxy Service</h2>

<p>When you register the service you have to mark it as allowed to delegate credentials.
You can do this anywhere you have an admin ticket or via the web UI, however there&rsquo;s less options to provide if you use one of the ipa client machines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ipa service-add HTTP/proxy.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET --ok-as-delegate<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>or to modify an existing service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ipa service-mod HTTP/proxy.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET --ok-as-delegate<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name="delegation"></a>Setting up the Delegation</h2>

<p>Unfortunately FreeIPA has no way to manage S4U2 delegations via the command line or GUI yet and so we must resort to editing LDAP directly.
The s4u2 access permissions are defined from a group of services (<code>groupOfPrincipals</code>) onto a group of services.</p>

<p>You can see existing delegations via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ldapsearch -Y GSSAPI -H ldap://ipa.s4u2.jamielennox.net -b <span class="s2">&quot;cn=s4u2proxy,cn=etc,dc=s4u2,dc=jamielennox,dc=net&quot;</span> <span class="s2">&quot;&quot;</span> <span class="s2">&quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This delegation is how the FreeIPA web service is able to use the user&rsquo;s credentials to read and write from the LDAP server so there is at least 1 existing rule that you can copy from.</p>

<p>A delegation consists of two parts:</p>

<ul>
<li>A target group with a list of services (<code>memberPrincipal</code>) that are allowed to receive delegated credentials.</li>
<li>A group (type <code>objectclass=ipaKrb5DelegationACL</code>) with a list of services (<code>memberPrincipal</code>) that are allowed to delegate credentials <em>AND</em> the target groups (<code>ipaAllowedTarget</code>) that they can delegate to.</li>
</ul>


<figure class='code'><figcaption><span>delegate.ldif  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># test-http-delegation-targets, s4u2proxy, etc, s4u2.jamielennox.net
</span><span class='line'>dn: cn=test-http-delegation-targets,cn=s4u2proxy,cn=etc,dc=s4u2,dc=jamielennox,dc=net
</span><span class='line'>objectClass: groupOfPrincipals
</span><span class='line'>objectClass: top
</span><span class='line'>cn: test-http-delegation-targets
</span><span class='line'>memberPrincipal: HTTP/service.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET
</span><span class='line'>
</span><span class='line'># test-http-delegation, s4u2proxy, etc, s4u2.jamielennox.net
</span><span class='line'>dn: cn=test-http-delegation,cn=s4u2proxy,cn=etc,dc=s4u2,dc=jamielennox,dc=net
</span><span class='line'>objectClass: ipaKrb5DelegationACL
</span><span class='line'>objectClass: groupOfPrincipals
</span><span class='line'>objectClass: top
</span><span class='line'>cn: test-http-delegation
</span><span class='line'>memberPrincipal: HTTP/proxy.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET
</span><span class='line'>ipaAllowedTarget: cn=test-http-delegation-targets,cn=s4u2proxy,cn=etc,dc=s4u2,dc=jamielennox,dc=net
</span></code></pre></td></tr></table></div></figure>


<p>Write it to LDAP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ldapmodify -a -H ldaps://ipa.s4u2.jamielennox.net -Y GSSAPI -f delegate.ldif
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s the hard work done, the <code>HTTP/proxy.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET</code> service now has permission to delegate a received ticket to <code>HTTP/service.s4u2.jamielennox.net@S4U2.JAMIELENNOX.NET</code>.</p>

<h2>Proxy</h2>

<p>Registering the proxy machine is very similar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hostnamectl <span class="nb">set</span>-hostname proxy.s4u2.jamielennox.net
</span><span class='line'>yum install -y ipa-client
</span><span class='line'>vim /etc/resolv.conf  <span class="c"># set DNS server to IPA IP address</span>
</span><span class='line'>setenforce 0
</span></code></pre></td></tr></table></div></figure>


<p>Because the easiest way I know to test a Kerberos endpoint is with curl I am also going to write the proxy service directly in bash:</p>

<figure class='code'><figcaption><span>/var/www/s4u2/index.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Content-Type: text/html; charset=UTF-8&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># simply dump the information from the service page</span>
</span><span class='line'>curl -s --negotiate -u :  http://service.s4u2.jamielennox.net
</span></code></pre></td></tr></table></div></figure>


<p>This works because the cgi-bin sets the request environment into the shell environment, so <code>$KRB5CCNAME</code> is set.
If you are using mod_wsgi or other then you would have to set that into your shell environment before executing any Kerberos commands.</p>

<p>I&rsquo;m going to skip the IPA client setup and fetching the keytab - this is required and done exactly the same as for the service.</p>

<p>The apache configuration for the proxy is very similar to the configuration of the service except we add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">KrbConstrainedDelegation</span> <span class="k">on</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within the apache vhost config file to enable it to delegate a Kerberos credential.</p>

<p>The final config file looks like:</p>

<figure class='code'><figcaption><span>/etc/httpd/conf.d/s4u2-proxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> proxy.s4u2.jamielennox.net
</span><span class='line'>
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="s2">&quot;/var/www/s4u2&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">&quot;/var/www/s4u2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews ExecCGI
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">AddHandler</span> cgi-script .sh
</span><span class='line'>    <span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Location</span> <span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">AuthType</span> Kerberos
</span><span class='line'>    <span class="nb">AuthName</span> <span class="s2">&quot;Kerberos Login&quot;</span>
</span><span class='line'>    <span class="nb">KrbMethodNegotiate</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">KrbMethodK5Passwd</span> <span class="k">off</span>
</span><span class='line'>    <span class="nb">KrbServiceName</span> HTTP
</span><span class='line'>    <span class="nb">KrbAuthRealms</span> S4U2.JAMIELENNOX.NET
</span><span class='line'>    <span class="nb">Krb5KeyTab</span> <span class="sx">/etc/httpd/conf/httpd.keytab</span>
</span><span class='line'>    <span class="nb">KrbSaveCredentials</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">KrbLocalUserMapping</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">Require</span> valid-user
</span><span class='line'>    <span class="nb">KrbConstrainedDelegation</span> <span class="k">on</span>
</span><span class='line'>  <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">DirectoryIndex</span> index.sh
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart apache to have your changes take effect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>systemctl restart httpd
</span></code></pre></td></tr></table></div></figure>


<h2>Voila</h2>

<p>After all that aiming firefox at <code>http://proxy.s4u2.jamielennox.net</code> gives me the same <code>phpinfo</code> page I got from when I talked to the service host directly.
You can verify from this site also that the <code>SERVER\_NAME service.s4u2.jamielennox.net</code> and that <code>REMOTE_USER</code> is <code>admin</code>.</p>

<h2><a name="furtherreading"></a>Further Reading</h2>

<p>There are a couple of sites that this guide is based on:</p>

<ul>
<li><a href="http://adam.younglogic.com/2014/05/s4u2proxy-horizon/">Adam Young</a> - who initially prototyped a lot of the work for horizon which we hope to have ready soon.</li>
<li><a href="https://vda.li/en/posts/2013/07/29/Setting-up-S4U2Proxy-with-FreeIPA/">Alexander Bokovoy</a> - who is the actual authority that Adam and I are relying upon.</li>
<li><a href="https://ssimo.org/blog/id_011.html">Simo Sorce</a> - explaining the rationale and uses for the S4U2 delegation mechanisms.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V3 Authentication With Auth_token Middleware]]></title>
    <link href="http://www.jamielennox.net/blog/2015/02/23/v3-authentication-with-auth-token-middleware/"/>
    <updated>2015-02-23T10:57:46+11:00</updated>
    <id>http://www.jamielennox.net/blog/2015/02/23/v3-authentication-with-auth-token-middleware</id>
    <content type="html"><![CDATA[<p>Auth_token is the middleware piece in OpenStack responsible for validating tokens and passing authentication and authorization information down to the services.
It has been a long time complaint of those wishing to move to the V3 identity API that auth_token only supported the v2 API for authentication.</p>

<p>Then auth_token middleware adopted authentication plugins and the people rejoiced!</p>

<p>Or it went by almost completely unnoticed.
Auth is not an area people like to mess with once it&rsquo;s working and people are still coming to terms with configuring via plugins.</p>

<p>The benefit of authentication plugins is that it allows you to use <a href="http://www.jamielennox.net/blog/2015/02/17/loading-authentication-plugins/">any plugin you like for authentication</a> - including the v3 plugins.
A downside is that being able to load any plugin means that there isn&rsquo;t the same set of default options present in the sample config files that would indicate the new options available for setting.
Particularly as we have to keep the old options around for compatibility.</p>

<p>The most common configuration I expect for v3 authentication with auth_token middleware is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[keystone_authtoken]</span>
</span><span class='line'><span class="na">auth_uri</span> <span class="o">=</span> <span class="s">https://public.keystone.uri:5000/</span>
</span><span class='line'><span class="na">cafile</span> <span class="o">=</span> <span class="s">/path/to/cas</span>
</span><span class='line'>
</span><span class='line'><span class="na">auth_plugin</span> <span class="o">=</span> <span class="s">password</span>
</span><span class='line'><span class="na">auth_url</span> <span class="o">=</span> <span class="s">http://internal.keystone.uri:35357/</span>
</span><span class='line'><span class="na">username</span> <span class="o">=</span> <span class="s">service</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">service_pass</span>
</span><span class='line'><span class="na">user_domain_name</span> <span class="o">=</span> <span class="s">service_domain</span>
</span><span class='line'><span class="na">project_name</span> <span class="o">=</span> <span class="s">project</span>
</span><span class='line'><span class="na">project_domain_name</span> <span class="o">=</span> <span class="s">service_domain</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>password</code> plugin will query the <code>auth_url</code> for supported API versions and then use either v2 or v3 auth depending on what parameters you&rsquo;ve specified.
If you want to save a round trip (once on startup) you can use the <code>v3password</code> plugin which takes the same parameters but requires a V3 URL to be specified in <code>auth_url</code>.</p>

<p>An unfortunate thing we&rsquo;ve noticed from this is that there is going to be some confusion as most plugins present an <code>auth_url</code> parameter (used by the plugin to know where to authenticate the service user) along with the existing <code>auth_uri</code> parameter (reported in the headers of 403 responses to tell users where to authenticate).
This is a known issue we need to address and will likely result in changing the name of the <code>auth_uri</code> parameter as the concept of an <code>auth_url</code> is used by all existing clients and plugins.</p>

<p>For further proof that this works as expected checkout <a href="https://github.com/openstack-dev/devstack/blob/5ce44cd63b6e2b53f08a6b4b87cb4ab11d1ade26/lib/keystone#L448">devstack</a> which has been operating this way for a couple of weeks.</p>

<p><em>NOTE:</em> Support for authentication plugins was released in keystonemiddleware 1.3.0 released 2014-12-18.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loading Authentication Plugins]]></title>
    <link href="http://www.jamielennox.net/blog/2015/02/17/loading-authentication-plugins/"/>
    <updated>2015-02-17T09:08:03+11:00</updated>
    <id>http://www.jamielennox.net/blog/2015/02/17/loading-authentication-plugins</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been pushing a lot on the authentication plugins aspect of keystoneclient recently.
They allow us to generalize the process of getting a token from OpenStack such that we can enable new mechanisms like <a href="https://github.com/openstack/python-keystoneclient-kerberos">Kerberos</a> or client certificate authentication - without having to modify all the clients.</p>

<p>For most people hardcoding credentials into scripts is not an option, both for security and for reusability reasons.
By having a standard loading mechanism for this selection of new plugins we can ensure that applications we write can be used with future plugins.
I am currently working on getting this method into the existing services to allow for more extensible service authentication, so this pattern should become more common in future.</p>

<p>There are two loading mechanisms for authentication plugins provided by keystoneclient:</p>

<ul>
<li>Loading from an <a href="http://docs.openstack.org/developer/oslo.config">oslo.config</a> CONF object.</li>
<li>Loading from an <a href="https://docs.python.org/2/library/argparse.html">argparse</a> command line</li>
</ul>


<h2>Loading from CONF</h2>

<p>We can define a plugin from CONF like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[somegroup]</span>
</span><span class='line'><span class="na">auth_plugin</span> <span class="o">=</span> <span class="s">v3password</span>
</span><span class='line'><span class="na">auth_url</span> <span class="o">=</span> <span class="s">http://keystone.test:5000/v3</span>
</span><span class='line'><span class="na">username</span> <span class="o">=</span> <span class="s">user</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">pass</span>
</span><span class='line'><span class="na">user_domain_name</span> <span class="o">=</span> <span class="s">domain</span>
</span><span class='line'><span class="na">project_name</span> <span class="o">=</span> <span class="s">proj</span>
</span><span class='line'><span class="na">project_domain_name</span> <span class="o">=</span> <span class="s">domain</span>
</span></code></pre></td></tr></table></div></figure>


<p>The initially required field here is <code>auth_plugin</code> which specifies the name of the plugin to load.
All other parameters in that section are dependant on the information that plugin (in this case v3password) requires.</p>

<p>To load that plugin from an application we do:</p>

<div><script src='https://gist.github.com/3b26bfb8e80fa48133e9.js?file=test-conf.py'></script>
<noscript><pre><code>import sys

from keystoneclient import auth
from keystoneclient import session
from oslo.config import cfg

cfg.CONF(sys.argv[1:])

auth.register_conf_options(cfg.CONF, &#39;somegroup&#39;)
session.Session.register_conf_options(cfg.CONF, &#39;somegroup&#39;)

plugin = auth.load_from_conf_options(cfg.CONF, &#39;somegroup&#39;)
sess = session.Session.load_from_conf_options(cfg.CONF,
                                              &#39;somegroup&#39;,
                                              auth=plugin)
</code></pre></noscript></div>


<p>Then create <code>novaclient</code>, <code>cinderclient</code> or whichever client you wish to talk to with that session as normal.</p>

<p>You can also use an <code>auth_section</code> parameter to specify a different group in which the authentication credentials are stored.
This allows you to reuse the same credentials in multiple places throughout your configuration file without copying and pasting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[somegroup]</span>
</span><span class='line'><span class="na">auth_section</span> <span class="o">=</span> <span class="s">credentials</span>
</span><span class='line'>
</span><span class='line'><span class="k">[othergroup]</span>
</span><span class='line'><span class="na">auth_section</span> <span class="o">=</span> <span class="s">credentials</span>
</span><span class='line'>
</span><span class='line'><span class="k">[credentials]</span>
</span><span class='line'><span class="na">auth_plugin</span> <span class="o">=</span> <span class="s">v3password</span>
</span><span class='line'><span class="na">auth_url</span> <span class="o">=</span> <span class="s">http://keystone.test:5000/v3</span>
</span><span class='line'><span class="na">username</span> <span class="o">=</span> <span class="s">user</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">pass</span>
</span><span class='line'><span class="na">user_domain_name</span> <span class="o">=</span> <span class="s">domain</span>
</span><span class='line'><span class="na">project_name</span> <span class="o">=</span> <span class="s">proj</span>
</span><span class='line'><span class="na">project_domain_name</span> <span class="o">=</span> <span class="s">domain</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above loading code for <code>[somegroup]</code> or <code>[othergroup]</code> will load separate instances of the same authentication plugin.</p>

<h2>Loading from the command line</h2>

<p>The options present on the command line are very similar to that presented via the config file, and follow a pattern familiar to the existing openstack CLI applications.
The equivalent options as specified in the config above would be presented as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./myapp --os-auth-plugin v3password <span class="se">\</span>
</span><span class='line'>        --os-auth-url http://keystone.test:5000/v3 <span class="se">\</span>
</span><span class='line'>        --os-username user <span class="se">\</span>
</span><span class='line'>        --os-password pass <span class="se">\</span>
</span><span class='line'>        --os-user-domain-name domain <span class="se">\</span>
</span><span class='line'>        --os-project-name proj <span class="se">\</span>
</span><span class='line'>        --os-project-domain-name domain
</span><span class='line'>        <span class="nb">command</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">OS_AUTH_PLUGIN</span><span class="o">=</span>v3password
</span><span class='line'><span class="nb">export </span><span class="nv">OS_AUTH_URL</span><span class="o">=</span>http://keystone.test:5000/v3
</span><span class='line'><span class="nb">export </span><span class="nv">OS_USERNAME</span><span class="o">=</span>user
</span><span class='line'><span class="nb">export </span><span class="nv">OS_PASSWORD</span><span class="o">=</span>pass
</span><span class='line'><span class="nb">export </span><span class="nv">OS_USER_DOMAIN_NAME</span><span class="o">=</span>domain
</span><span class='line'><span class="nb">export </span><span class="nv">OS_PROJECT_NAME</span><span class="o">=</span>proj
</span><span class='line'><span class="nb">export </span><span class="nv">OS_PROJECT_DOMAIN_NAME</span><span class="o">=</span>domain
</span><span class='line'>
</span><span class='line'>./myapp <span class="nb">command</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is loaded from python via:</p>

<div><script src='https://gist.github.com/4e22049c5bc57f4b68ec.js?file=test-cli.py'></script>
<noscript><pre><code>import argparse
import sys

from keystoneclient import auth
from keystoneclient import session

parser = argparse.ArgumentParser(&#39;myapp&#39;)

auth.register_argparse_arguments(parser, sys.argv[1:])
session.Session.register_cli_options(parser)

args = parser.parse_args()

plugin = auth.load_from_argparse_arguments(args)
sess = session.Session.load_from_cli_options(args, auth=plugin)
</code></pre></noscript></div>


<p><strong>NOTE</strong>: I am aware that the syntax is wonky with the command for session loading and auth plugin loading different.
This was one of those things that was &lsquo;optimized&rsquo; between reviews and managed to slip through.
There is a review out to standardize this.</p>

<p>This will also set <code>--help</code> appropriately, so if you are unsure of the arguments that this particular authentication plugin takes you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./myapp --os-auth-plugin v3password --help
</span><span class='line'>
</span><span class='line'>usage: myapp <span class="o">[</span>-h<span class="o">]</span> <span class="o">[</span>--os-auth-plugin &lt;name&gt;<span class="o">]</span> <span class="o">[</span>--os-auth-url OS_AUTH_URL<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-domain-id OS_DOMAIN_ID<span class="o">]</span> <span class="o">[</span>--os-domain-name OS_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-project-id OS_PROJECT_ID<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-project-name OS_PROJECT_NAME<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-project-domain-id OS_PROJECT_DOMAIN_ID<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-project-domain-name OS_PROJECT_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-trust-id OS_TRUST_ID<span class="o">]</span> <span class="o">[</span>--os-user-id OS_USER_ID<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-user-name OS_USERNAME<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-user-domain-id OS_USER_DOMAIN_ID<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-user-domain-name OS_USER_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-password OS_PASSWORD<span class="o">]</span> <span class="o">[</span>--insecure<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-cacert &lt;ca-certificate&gt;<span class="o">]</span> <span class="o">[</span>--os-cert &lt;certificate&gt;<span class="o">]</span>
</span><span class='line'>             <span class="o">[</span>--os-key &lt;key&gt;<span class="o">]</span> <span class="o">[</span>--timeout &lt;seconds&gt;<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help            show this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>  --os-auth-plugin &lt;name&gt;
</span><span class='line'>                        The auth plugin to load
</span><span class='line'>  --insecure            Explicitly allow client to perform <span class="s2">&quot;insecure&quot;</span> TLS
</span><span class='line'>                        <span class="o">(</span>https<span class="o">)</span> requests. The server<span class="s1">&#39;s certificate will not be</span>
</span><span class='line'><span class="s1">                        verified against any certificate authorities. This</span>
</span><span class='line'><span class="s1">                        option should be used with caution.</span>
</span><span class='line'><span class="s1">  --os-cacert &lt;ca-certificate&gt;</span>
</span><span class='line'><span class="s1">                        Specify a CA bundle file to use in verifying a TLS</span>
</span><span class='line'><span class="s1">                        (https) server certificate. Defaults to</span>
</span><span class='line'><span class="s1">                        env[OS_CACERT].</span>
</span><span class='line'><span class="s1">  --os-cert &lt;certificate&gt;</span>
</span><span class='line'><span class="s1">                        Defaults to env[OS_CERT].</span>
</span><span class='line'><span class="s1">  --os-key &lt;key&gt;        Defaults to env[OS_KEY].</span>
</span><span class='line'><span class="s1">  --timeout &lt;seconds&gt;   Set request timeout (in seconds).</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Authentication Options:</span>
</span><span class='line'><span class="s1">  Options specific to the v3password plugin.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  --os-auth-url OS_AUTH_URL</span>
</span><span class='line'><span class="s1">                        Authentication URL</span>
</span><span class='line'><span class="s1">  --os-domain-id OS_DOMAIN_ID</span>
</span><span class='line'><span class="s1">                        Domain ID to scope to</span>
</span><span class='line'><span class="s1">  --os-domain-name OS_DOMAIN_NAME</span>
</span><span class='line'><span class="s1">                        Domain name to scope to</span>
</span><span class='line'><span class="s1">  --os-project-id OS_PROJECT_ID</span>
</span><span class='line'><span class="s1">                        Project ID to scope to</span>
</span><span class='line'><span class="s1">  --os-project-name OS_PROJECT_NAME</span>
</span><span class='line'><span class="s1">                        Project name to scope to</span>
</span><span class='line'><span class="s1">  --os-project-domain-id OS_PROJECT_DOMAIN_ID</span>
</span><span class='line'><span class="s1">                        Domain ID containing project</span>
</span><span class='line'><span class="s1">  --os-project-domain-name OS_PROJECT_DOMAIN_NAME</span>
</span><span class='line'><span class="s1">                        Domain name containing project</span>
</span><span class='line'><span class="s1">  --os-trust-id OS_TRUST_ID</span>
</span><span class='line'><span class="s1">                        Trust ID</span>
</span><span class='line'><span class="s1">  --os-user-id OS_USER_ID</span>
</span><span class='line'><span class="s1">                        User ID</span>
</span><span class='line'><span class="s1">  --os-user-name OS_USERNAME, --os-username OS_USERNAME</span>
</span><span class='line'><span class="s1">                        Username</span>
</span><span class='line'><span class="s1">  --os-user-domain-id OS_USER_DOMAIN_ID</span>
</span><span class='line'><span class="s1">                        User&#39;</span>s domain id
</span><span class='line'>  --os-user-domain-name OS_USER_DOMAIN_NAME
</span><span class='line'>                        User<span class="s1">&#39;s domain name</span>
</span><span class='line'><span class="s1">  --os-password OS_PASSWORD</span>
</span><span class='line'><span class="s1">                        User&#39;</span>s password
</span></code></pre></td></tr></table></div></figure>


<p>To prevent polluting your CLI&rsquo;s help only the &lsquo;Authentication Options&rsquo; for the plugin you specified by &lsquo;&ndash;os-auth-plugin&rsquo; are added to the help.</p>

<p>Having explained all this one of the primary application currently embracing authentication plugins, <a href="https://github.com/openstack/python-openstackclient">openstackclient</a>, currently handles its options slightly differently and you will need to use <code>--os-auth-type</code> instead of <code>--os-auth-plugin</code></p>

<h2>Available plugins</h2>

<p>The <a href="http://docs.openstack.org/developer/python-keystoneclient/authentication-plugins.html">documentation</a> for plugins provides basic features and parameters however it&rsquo;s not always going to be up to date with all options, especially for plugins not handled within keystoneclient.
The following is a fairly simple script that lists all the plugins that are installed on the system and their options.</p>

<div><script src='https://gist.github.com/7f5cfabd64a6922e643c.js?file=list-plugins.py'></script>
<noscript><pre><code>import stevedore

mgr = stevedore.ExtensionManager(namespace=&#39;keystoneclient.auth.plugin&#39;,
                                 invoke_on_load=False)

def print_plugin(ext):
    print &quot;%s:&quot; % ext.entry_point.name

    for opt in ext.plugin.get_options():
        print &quot;    %s: %s&quot; % (opt.name, opt.help)

mgr.map(print_plugin)
</code></pre></noscript></div>


<p>Which for the <code>v3password</code> plugin we&rsquo;ve been using returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'>v3password:
</span><span class='line'>    auth-url: Authentication URL
</span><span class='line'>    domain-id: Domain ID to scope to
</span><span class='line'>    domain-name: Domain name to scope to
</span><span class='line'>    project-id: Project ID to scope to
</span><span class='line'>    project-name: Project name to scope to
</span><span class='line'>    project-domain-id: Domain ID containing project
</span><span class='line'>    project-domain-name: Domain name containing project
</span><span class='line'>    trust-id: Trust ID
</span><span class='line'>    user-id: User ID
</span><span class='line'>    user-name: Username
</span><span class='line'>    user-domain-id: User<span class="s1">&#39;s domain id</span>
</span><span class='line'><span class="s1">    user-domain-name: User&#39;</span>s domain name
</span><span class='line'>    password: User<span class="err">&#39;</span>s password
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>From that it&rsquo;s pretty simple to determine the correct format for parameters.</p>

<ul>
<li>When using the CLI you should prefix <code>--os-</code>, e.g. <code>auth-url</code> becomes <code>--os-auth-url</code>.</li>
<li>Environment variables are upper-cased, and prefix <code>OS_</code> and replace <code>-</code> with <code>_</code>, e.g. <code>auth-url</code> becomes <code>OS_AUTH_URL</code>.</li>
<li>Conf file variables replace <code>-</code> with <code>_</code> eg. <code>auth-url</code> becomes <code>auth_url</code>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step-by-Step: Kerberized Keystone]]></title>
    <link href="http://www.jamielennox.net/blog/2015/02/12/step-by-step-kerberized-keystone/"/>
    <updated>2015-02-12T17:20:42+11:00</updated>
    <id>http://www.jamielennox.net/blog/2015/02/12/step-by-step-kerberized-keystone</id>
    <content type="html"><![CDATA[<p>Authentication plugins in Keystoneclient have gotten to the point where they are sufficiently well deployed that we can start to do interesting additional forms of authentication.
As Kerberos is a commonly requested authentication mechanism here is a simple, single domain keystone setup using Kerberos authentication.
They are not necessarily how you would setup a production deployment, but should give you the information you need to configure that yourself.</p>

<p>They create:</p>

<ul>
<li>A <a href="https://www.freeipa.org">FreeIPA</a> server machine called <code>ipa.test.jamielennox.net</code></li>
<li>A <a href="https://openstack.redhat.com/Quickstart">Packstack</a> all in one deployment of OpenStack called <code>openstack.test.jamielennox.net</code></li>
</ul>


<!-- more -->


<p>Notes:</p>

<ul>
<li>I use the realm <code>TEST.JAMIELENNOX.NET</code>. There is no meaning to this domain, it doesn&rsquo;t exist or make any difference to the deployment.</li>
<li>I am using a single domain deployment, so regular users and service users are intermingled.
There is no great benefit to this because the Kerberos plugin only supports the Keystone v3 API (so you have to be domain aware), however it a couple of steps.
Generally when doing a deployment like this I would put the IPA users in there own domain.</li>
</ul>


<p>Disclaimer:</p>

<ul>
<li>The goal of Kerberos authentication is obviously to enable both the command line and horizon interfaces to use your existing Kerberos ticket.
At the time of writing the <a href="http://docs.openstack.org/developer/python-openstackclient/">openstackclient</a> is really the only client capable of using plugins.
I am also <a href="https://review.openstack.org/#/c/153910/">working</a> <a href="https://review.openstack.org/#/c/153174/">on</a> the patches required to enable horizon for SSO.
There are obviously no promises that will be ready and accepted for the Kilo release, but I&rsquo;m hoping so.</li>
</ul>


<h2>Part 1 - Install FreeIPA</h2>

<p>From a brand new centos 7 image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@ipa]# yum update -y</span>
</span><span class='line'><span class="go">[root@ipa]# hostnamectl set-hostname ipa.test.jamielennox.net</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now install the FreeIPA server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@ipa]# yum install ipa-server bind-dyndb-ldap -y</span>
</span><span class='line'><span class="go">[root@ipa]# ipa-server-install</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve ignored the details here, generally having correctly set the hostname the defaults are correct for me, the only thing I generally do is opt to configuring bind for DNS.
This is the reason for installing <code>bind-dyndb-ldap</code> and you can skip it if you don&rsquo;t install bind, however you will need to edit your <code>/etc/hosts</code> file for the IPA server for the other machines as IPA relies on hostnames.</p>

<p>Pay particular attention to the username you give to the <code>admin</code> user as this user will be used from keystone later.
If you are unfamiliar with FreeIPA I suggest you test out the web interface, this is where your users will be registered.
As FreeIPA expects to be on a routable address you will need to add the hostname to <code>/etc/hosts</code> of the client machine to use the web service.</p>

<h2>Part 2 - Register as a FreeIPA Client</h2>

<p>The first thing I like to do is register the machine as a FreeIPA client machine.
After registering the machine comes available for us to fetch Kerberos tickets from (and SSL certs, etc).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# yum update -y</span>
</span><span class='line'><span class="go">[root@openstack]# hostnamectl set-hostname openstack.test.jamielennox.net</span>
</span><span class='line'><span class="gp">[root@openstack]# vim /etc/resolv.conf  #</span> and update your DNS server IP of the ipa machine.
</span><span class='line'><span class="go">[root@openstack]# yum install ipa-client -y</span>
</span><span class='line'><span class="go">[root@openstack]# ipa-client-install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, having correctly set a hostname and DNS server the default options are correct for me.
You&rsquo;ll need to provide the admin user and password from setting up the FreeIPA server.</p>

<h2>Part 3 - Install Packstack</h2>

<p>Packstack is a series of wrappers around the upstream puppet scripts that integrates well with RHEL/Centos, it will deploy the latest packaged version which is currently Juno.
You could use devstack or any alternative deployment here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">[root@openstack]# setenforce 0  #</span> :<span class="o">(</span>
</span><span class='line'><span class="go">[root@openstack]# yum install -y https://rdo.fedorapeople.org/rdo-release.rpm</span>
</span><span class='line'><span class="go">[root@openstack]# yum install -y openstack-packstack</span>
</span><span class='line'><span class="go">[root@openstack]# packstack --allinone</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>--allinone</code> option configures the entire OpenStack deployment on this machine, see <a href="https://openstack.redhat.com/Docs">the docs</a> for more detailed deployments methods.</p>

<h2>Part 4 - Convert Keystone to Apache</h2>

<p>To use kerberos authentication the keystone server uses the <code>mod_auth_kerb</code> Apache module. We therefore need to run the keystone server within Apache rather than from the script.
Ideally here we would have generated an answer file and told Packstack to use the <code>httpd</code> deployment method (which it can do) however this never seems to work for me, so I&rsquo;ll do it manually. YMMV.</p>

<p>Stop the existing keystone server and prevent it starting on boot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# systemctl stop openstack-keystone</span>
</span><span class='line'><span class="go">[root@openstack]# systemctl disable openstack-keystone</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many ways you could setup keystone within Apache. I don&rsquo;t think the <a href="http://docs.openstack.org/developer/keystone/apache-httpd.html">official docs</a> explain this very well but you can deploy it as you would any other <code>mod_wsgi</code> python site.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# mkdir /var/www/keystone</span>
</span><span class='line'><span class="go">[root@openstack]# ln -s /usr/share/keystone/keystone.wsgi /var/www/keystone/admin</span>
</span><span class='line'><span class="go">[root@openstack]# ln -s /usr/share/keystone/keystone.wsgi /var/www/keystone/main</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the httpd config file I used initially:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">Listen</span> <span class="m">5000</span>
</span><span class='line'><span class="nb">Listen</span> <span class="m">35357</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:5000</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> openstack.test.jamielennox.net
</span><span class='line'>
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="s2">&quot;/var/www/keystone&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">&quot;/var/www/keystone&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">## Logging</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="s2">&quot;/var/log/httpd/keystone_wsgi_main_error.log&quot;</span>
</span><span class='line'>  <span class="nb">ServerSignature</span> <span class="k">Off</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="s2">&quot;/var/log/httpd/keystone_wsgi_main_access.log&quot;</span> combined
</span><span class='line'>  <span class="nb">WSGIDaemonProcess</span> keystone_main <span class="k">group</span>=keystone processes=1 threads=4 <span class="k">user</span>=keystone
</span><span class='line'>  <span class="nb">WSGIProcessGroup</span> keystone_main
</span><span class='line'>  <span class="nb">WSGIScriptAlias</span> / <span class="s2">&quot;/var/www/keystone/main&quot;</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:35357</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> openstack.test.jamielennox.net
</span><span class='line'>
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="s2">&quot;/var/www/keystone&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">&quot;/var/www/keystone&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> Indexes FollowSymLinks MultiViews
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">## Logging</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="s2">&quot;/var/log/httpd/keystone_wsgi_admin_error.log&quot;</span>
</span><span class='line'>  <span class="nb">ServerSignature</span> <span class="k">Off</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="s2">&quot;/var/log/httpd/keystone_wsgi_admin_access.log&quot;</span> combined
</span><span class='line'>  <span class="nb">WSGIDaemonProcess</span> keystone_admin <span class="k">group</span>=keystone processes=1 threads=4 <span class="k">user</span>=keystone
</span><span class='line'>  <span class="nb">WSGIProcessGroup</span> keystone_admin
</span><span class='line'>  <span class="nb">WSGIScriptAlias</span> / <span class="s2">&quot;/var/www/keystone/admin&quot;</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you restart Apache with this configuration you should see keystone start up and run with no apparent difference.</p>

<p>There has been a push recently to stop using ports 5000 and 35357 when using apache and run them off the <code>/main</code> and <code>/admin</code> paths.
This will work just fine, however I&rsquo;m trying to do this with as little overall change to the initial deployment, you may obviously set your deployment up to your own needs.</p>

<h2>Part 5 - Convert Keystone to LDAP:</h2>

<p>First we create a keystone user.
This isn&rsquo;t required in a typical deployment, however we need to provide a user with which to connect to the ldap server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ipa user-add --first keystone --last openstack --random keystone</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>--random</code> sets a random password, you can omit it and set your own if you like.</p>

<p>Edit the <code>/etc/keystone/keystone.conf</code> file to use LDAP for the identity backend, and SQL for assignments.
This is the preferred deployment so whilst the users are in LDAP, projects and the permissions a user has on a project are managed in SQL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[identity]</span>
</span><span class='line'><span class="na">driver</span> <span class="o">=</span> <span class="s">keystone.identity.backends.ldap.Identity</span>
</span><span class='line'>
</span><span class='line'><span class="k">[assignment]</span>
</span><span class='line'><span class="na">driver</span> <span class="o">=</span> <span class="s">keystone.assignment.backends.sql.Assignment</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still in <code>/etc/keystone/keystone.conf</code> we set the parameters for how to talk to the LDAP server that FreeIPA set up.
The password used here is the random one generated above.
You will need to replace the pattern <code>dc=test,dc=jamielennox,dc=net</code> with the similarly formatted realm that FreeIPA is configured for in your deployment.
This is the complete (comments removed) <code>[ldap]</code> section of the <code>keystone.conf</code> file.
This plus the <code>[identity]</code> block above are also exactly what would go into a <a href="http://docs.openstack.org/developer/keystone/configuration.html#domain-specific-drivers">domain specific backend</a> configuration if you are deploying that way.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[ldap]</span>
</span><span class='line'><span class="na">url</span><span class="o">=</span><span class="s">ldaps://ipa.test.jamielennox.net</span>
</span><span class='line'><span class="na">user</span><span class="o">=</span><span class="s">uid=keystone,cn=users,cn=accounts,dc=test,dc=jamielennox,dc=net</span>
</span><span class='line'><span class="na">password</span><span class="o">=</span><span class="s">D@yFxU6SZHV_</span>
</span><span class='line'><span class="na">suffix</span><span class="o">=</span><span class="s">dc=test,dc=jamielennox,dc=net</span>
</span><span class='line'><span class="na">user_tree_dn</span><span class="o">=</span><span class="s">cn=users,cn=accounts,dc=test,dc=jamielennox,dc=net</span>
</span><span class='line'><span class="na">user_objectclass</span><span class="o">=</span><span class="s">person</span>
</span><span class='line'><span class="na">user_id_attribute</span><span class="o">=</span><span class="s">uid</span>
</span><span class='line'><span class="na">user_name_attribute</span><span class="o">=</span><span class="s">uid</span>
</span><span class='line'><span class="na">user_mail_attribute</span><span class="o">=</span><span class="s">mail</span>
</span><span class='line'><span class="na">user_allow_create</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">user_allow_update</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">user_allow_delete</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">group_tree_dn</span><span class="o">=</span><span class="s">cn=groups,cn=accounts,dc=test,dc=jamielennox,dc=net</span>
</span><span class='line'><span class="na">group_objectclass</span><span class="o">=</span><span class="s">groupOfNames</span>
</span><span class='line'><span class="na">group_id_attribute</span><span class="o">=</span><span class="s">cn</span>
</span><span class='line'><span class="na">group_name_attribute</span><span class="o">=</span><span class="s">cn</span>
</span><span class='line'><span class="na">group_member_attribute</span><span class="o">=</span><span class="s">member</span>
</span><span class='line'><span class="na">group_desc_attribute</span><span class="o">=</span><span class="s">description</span>
</span><span class='line'><span class="na">group_allow_create</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">group_allow_update</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">group_allow_delete</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">user_enabled_attribute</span><span class="o">=</span><span class="s">nsAccountLock</span>
</span><span class='line'><span class="na">user_enabled_default</span><span class="o">=</span><span class="s">False</span>
</span><span class='line'><span class="na">user_enabled_invert</span><span class="o">=</span><span class="s">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to restart keystone (via apache) to set this configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# systemctl restart httpd</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 6 - Recreate the LDAP users:</h2>

<p>This is particularly hacky.
For my single domain deployment when I switch Keystone over to using the LDAP source it will loose access to the users that were set up via Packstack so I will need to recreate these users.
If you are using multiple domains you can skip this, leave the service users in the default domain and use your FreeIPA users via an alternative domain.</p>

<p>The easiest way I&rsquo;ve found to do this is to remove the <code>[general]</code> tag at the top of the Packstack answers file that was created and then <code>source</code> it as bash environment variables.
This answers file is generally found in <code>/root/</code> and will be appended with a timestamp.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">[root@openstack]# sed -i -e &quot;s/\[general\]/#</span> <span class="o">[</span>general<span class="o">]</span>/<span class="err">&quot;</span> packstack-answers.txt
</span><span class='line'><span class="go">[root@openstack]# source packstack-answers.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then install the admin tools to allow you to add users via command line and <code>kinit</code> as the <code>admin</code> user to have permission to add users.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# yum install -y ipa-admintools</span>
</span><span class='line'><span class="go">[root@openstack]# kinit admin</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then recreate those users, I&rsquo;ll omit the shell prompt here so that it&rsquo;s easier to copy and paste, but you could script this fairly easily.
We are creating a FreeIPA user for each of the services, setting a password for the user, and then assigning the user a role on the services project.</p>

<p>I&rsquo;m using the admin token to assign the roles as there are no longer any valid users that I can use to assign these roles.</p>

<p><strong>NOTE</strong>: This is a fairly unsafe way of creating these users in IPA as they are given full home and login permissions to any IPA machines.
In a real deployment these should be system users and ensure they aren&rsquo;t able to login.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">export OS_ENDPOINT=http://localhost:35357/v2.0</span>
</span><span class='line'><span class="go">export OS_TOKEN=$CONFIG_KEYSTONE_ADMIN_TOKEN</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first nova --last openstack nova &amp;&amp; echo $CONFIG_NOVA_KS_PW | ipa passwd nova</span>
</span><span class='line'><span class="go">keystone user-role-add --user nova --role admin --tenant services</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first ceilometer --last openstack ceilometer &amp;&amp; echo $CONFIG_CEILOMETER_KS_PW | ipa passwd ceilometer</span>
</span><span class='line'><span class="go">keystone user-role-add --user ceilometer --role admin --tenant services</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first cinder --last openstack cinder &amp;&amp; echo $CONFIG_CINDER_KS_PW | ipa passwd cinder</span>
</span><span class='line'><span class="go">keystone user-role-add --user cinder --role admin --tenant services</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first glance --last openstack glance &amp;&amp; echo $CONFIG_GLANCE_KS_PW | ipa passwd glance</span>
</span><span class='line'><span class="go">keystone user-role-add --user glance --role admin --tenant services</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first neutron --last openstack neutron &amp;&amp; echo $CONFIG_NEUTRON_KS_PW | ipa passwd neutron</span>
</span><span class='line'><span class="go">keystone user-role-add --user neutron --role admin --tenant services</span>
</span><span class='line'>
</span><span class='line'><span class="go">ipa user-add --first swift --last openstack swift &amp;&amp; echo $CONFIG_SWIFT_KS_PW | ipa passwd swift</span>
</span><span class='line'><span class="go">keystone user-role-add --user swift --role admin --tenant services</span>
</span></code></pre></td></tr></table></div></figure>


<p>I add the keystone user to the services project as well - though in this case it won&rsquo;t really matter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">keystone user-role-add --user keystone --role admin --tenant services</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the demo user and add the default roles to admin and demo so the <code>keystonerc_admin</code> and <code>keystonerc_demo</code> files still work as expected.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ipa user-add --first demo --last openstack demo &amp;&amp; echo $CONFIG_KEYSTONE_DEMO_PW  | ipa passwd demo</span>
</span><span class='line'><span class="go">keystone user-role-add --user demo --role _member_ --tenant demo</span>
</span><span class='line'>
</span><span class='line'><span class="go">keystone user-role-add --user admin --role admin --tenant admin</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 7 - Kerberos:</h2>

<p>Now we look to add Kerberos authentication.
First we have to register the service that you want to use on the IPA server.
For the current Kerberos plugin this <em>must</em> be the HTTP service or the plugin won&rsquo;t catch it.
Then we fetch the keytab and put it somewhere apache can access it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# ipa service-add HTTP/openstack.test.jamielennox.net@TEST.JAMIELENNOX.NET</span>
</span><span class='line'><span class="go">[root@openstack]# ipa-getkeytab -s ipa.test.jamielennox.net -p HTTP/openstack.test.jamielennox.net@TEST.JAMIELENNOX.NET -k /etc/httpd/conf/httpd.keytab</span>
</span><span class='line'><span class="go">[root@openstack]# chown apache: /etc/httpd/conf/httpd.keytab</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install the <code>mod_auth_kerb</code> apache module which handles Kerberos Authentication, and enable it.
(Generally you don&rsquo;t have to enable module, this looks like a pattern that packstack has established)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# yum install -y mod_auth_kerb</span>
</span><span class='line'><span class="go">[root@openstack]# ln -s /etc/httpd/conf.modules.d/10-auth_kerb.conf /etc/httpd/conf.d/10-auth_kerb.load</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following snippet to <em>both</em> the vhosts we created earlier, adjusting <code>/main</code> to <code>/admin</code> for the admin port.
The <code>WSGIScriptAlias / "/var/www/keystone/main"</code> is already present from the initial setup, this just shows that you need to insert the <code>/krb</code> reference <em>above</em> it to make it take precedence.</p>

<p>This is creating a new route to the Keystone server code through which every access is Kerberos protected.
We will use this address later as our authentication URL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">WSGIScriptAlias</span> <span class="sx">/krb</span> <span class="s2">&quot;/var/www/keystone/main&quot;</span>
</span><span class='line'><span class="nb">WSGIScriptAlias</span> / <span class="s2">&quot;/var/www/keystone/main&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Location</span> <span class="s">&quot;/krb/v3/auth/tokens&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nb">LogLevel</span> <span class="k">debug</span>
</span><span class='line'>      <span class="nb">AuthType</span> Kerberos
</span><span class='line'>      <span class="nb">AuthName</span> <span class="s2">&quot;Kerberos Login&quot;</span>
</span><span class='line'>      <span class="nb">KrbMethodNegotiate</span> <span class="k">on</span>
</span><span class='line'>      <span class="nb">KrbMethodK5Passwd</span> <span class="k">off</span>
</span><span class='line'>      <span class="nb">KrbServiceName</span> HTTP
</span><span class='line'>      <span class="nb">KrbAuthRealms</span> TEST.JAMIELENNOX.NET
</span><span class='line'>      <span class="nb">Krb5KeyTab</span> <span class="sx">/etc/httpd/conf/httpd.keytab</span>
</span><span class='line'>      <span class="nb">KrbLocalUserMapping</span> <span class="k">on</span>
</span><span class='line'>      <span class="nb">Require</span> valid-user
</span><span class='line'>      <span class="nb">SetEnv</span> REMOTE_DOMAIN Default
</span><span class='line'><span class="nt">&lt;/Location&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The SetEnv directive there is not required as we are deploying into the <code>Default</code> domain, however if you are deploying into a different domain you should set <code>REMOTE_DOMAIN</code> to the <em>name</em> of the user&rsquo;s domain.</p>

<p>Restart Apache.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# systemctl restart httpd</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 8 - Client:</h2>

<p>Obviously you don&rsquo;t have to run the client on the same machine as the server.
You can start up another machine here and do an <code>ipa-client-install</code> to initialize it for testing if you like, or put it on your own desktop (you can add your kerberos server to <code>/etc/krb5.conf</code> to not register it as a FreeIPA client).</p>

<p>Install the openstack command line tool</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# yum install -y python-openstackclient</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also want to install the Kerberos client plugin from source.
This plugin is imminently due for its first release on PyPI however it will take a while to get to packages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@openstack]# yum groupinstall &quot;Development Tools&quot;</span>
</span><span class='line'><span class="go">[root@openstack]# yum install -y krb5-devel</span>
</span><span class='line'><span class="go">[root@openstack]# git clone https://github.com/openstack/python-keystoneclient-kerberos.git /opt/python-keystoneclient-kerberos</span>
</span><span class='line'><span class="go">[root@openstack]# pip install -e /opt/python-keystoneclient-kerberos</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>kinit</code> as the demo user to get a Kerberos ticket to test with.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">[root@openstack]# su centos  #</span> or another user
</span><span class='line'><span class="gp">[centos@openstack]$ echo $</span>CONFIG_KEYSTONE_DEMO_PW <span class="p">|</span> kinit demo
</span></code></pre></td></tr></table></div></figure>


<p>Finally, for the dramatic finale, let&rsquo;s get a token.
I&rsquo;m putting the authentication parameters on the command line however they all exist as environment variables to create your own <code>keystonerc</code> file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[centos@openstack]$ export OS_AUTH_URL=http://openstack.test.jamielennox.net:5000/krb/v3</span>
</span><span class='line'><span class="go">[centos@openstack]$ export OS_AUTH_TYPE=v3kerberos</span>
</span><span class='line'><span class="go">[centos@openstack]$ export OS_PROJECT_NAME=demo</span>
</span><span class='line'><span class="go">[centos@openstack]$ export OS_PROJECT_DOMAIN_ID=default</span>
</span><span class='line'><span class="go">[centos@openstack]$ openstack token issue</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the main authentication differences (and I&rsquo;ll use the CLI equivalent for demonstration):</p>

<ul>
<li><code>--os-auth-url http://openstack.test.jamielennox.net:5000/krb/v3</code> we need to specify the v3 <code>auth-url</code> and include the <code>/krb</code> path so that the authentication request goes to the Kerberos route.
Also because of the way your Kerberos ticket will be validated you have to use the full hostname as the url, even if you are calling from that box.</li>
<li><code>--os-auth-type v3kerberos</code> which tells the CLI to use the kerberos plugin appropriate for the v3 API.</li>
<li><code>--os-project-domain-id</code> because we are in the V3 API now so you need to specify the domain-id if you use <code>--os-project-name</code></li>
</ul>


<h1>Finish</h1>

<p>Getting to the point where we can support the <code>openstack</code> command line tool has taken a lot of foundational work, and due to the independence of the clients it may be some time before the existing CLIs come to accept an authentication plugin parameter.
However now the foundation is in place I hope to see Kerberos becoming a more widely deployed authentication mechanism for OpenStack.</p>

<h1>Thanks</h1>

<p>Special thanks have to go to:</p>

<ul>
<li><a href="https://twitter.com/josecastroleon">Jose Castro Leon</a> and <a href="https://twitter.com/marekdenis">Marek Dennis</a> from CERN who did the initial Kerberos implementation and have been pushing the approach.</li>
<li><a href="https://blog-nkinder.rhcloud.com/">Nathan Kinder</a> who <a href="https://github.com/nkinder/rdo-vm-factory/blob/master/rdo-kerberos-setup/vm-post-cloud-init-rdo.sh">scripted a setup</a> that is more advanced and production worthy that I cheated off for a number of settings.</li>
<li><a href="http://adam.younglogic.com/">Adam Young</a> who started this whole Kerberos quest and who has stepped me through most of the above at least once.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PKI Tokens Don't Give Better Security]]></title>
    <link href="http://www.jamielennox.net/blog/2014/12/01/pki-tokens-dont-give-better-security/"/>
    <updated>2014-12-01T13:55:29+11:00</updated>
    <id>http://www.jamielennox.net/blog/2014/12/01/pki-tokens-dont-give-better-security</id>
    <content type="html"><![CDATA[<p>This will be real quick.</p>

<p>Every now and then I come across something that mentions how you should use PKI tokens in keystone as the cryptography gives it better security.
It happened today and so I thought I should clarify:</p>

<p><strong>There is no added security benefit to using keystone with PKI tokens over UUID tokens.</strong></p>

<p>There are advantages to PKI tokens:</p>

<ul>
<li>Token validation without a request to keystone means less impact on keystone.</li>
</ul>


<p>And there are disadvantages:</p>

<ul>
<li>Larger token size.</li>
<li>Additional complexity to set up.</li>
</ul>


<p>However the fundamental model, that this opaque chunk of data in the &lsquo;X-Auth-Token&rsquo; header indicates that this request is authenticated does not change between PKI and UUID tokens.
If someone steals your PKI token you are just as screwed as if they stole your UUID token.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Keystoneclient Sessions]]></title>
    <link href="http://www.jamielennox.net/blog/2014/09/15/how-to-use-keystoneclient-sessions/"/>
    <updated>2014-09-15T09:13:36+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/09/15/how-to-use-keystoneclient-sessions</id>
    <content type="html"><![CDATA[<p>In the last post I did on keystoneclient sessions there was a lot of hand waving about how they should work but it&rsquo;s not merged yet.
Standardizing clients has received some more attention again recently - and now that the sessions are more mature and ready it seems like a good opportunity to explain them and how to use them again.</p>

<p>For those of you new to this area the clients have grown very organically, generally forking off some existing client and adding and removing features in ways that worked for that project.
Whilst this is in general a problem for user experience (try to get one token and use it with multiple clients without reauthenticating) it is a nightmare for security fixes and new features as they need to be applied individually across each client.</p>

<p>Sessions are an attempt to extract a common authentication and communication layer from the existing clients so that we can handle transport security once, and keystone and deployments can add new authentication mechanisms without having to do it for every client.</p>

<h2>The Basics</h2>

<p>Sessions and authentications are user facing objects that you create and pass to a client, they are public objects not a framework for the existing clients.
They require a change in how you instantiate clients.</p>

<p>The first step is to create an authentication plugin, currently the available plugins are:</p>

<ul>
<li><code>keystoneclient.auth.identity.v2.Password</code></li>
<li><code>keystoneclient.auth.identity.v2.Token</code></li>
<li><code>keystoneclient.auth.identity.v3.Password</code></li>
<li><code>keystoneclient.auth.identity.v3.Token</code></li>
<li><code>keystoneclient.auth.token_endpoint.Token</code></li>
</ul>


<p>For the primary user/password and token authentication mechanisms that keystone supports in v2 and v3 and for the test case where you know the endpoint and token in advance.
The parameters will vary depending upon what is required to authenticate with each.</p>

<p>Plugins don&rsquo;t need to live in the keystoneclient, we are currently in the process of setting up a new repository for kerberos authentication so that it will be an optional dependency.
There are also some plugins living in the contrib section of keystoneclient for federation that will also likely be moved to a new repository soon.</p>

<p>You can then create a session with that plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient</span> <span class="kn">import</span> <span class="n">session</span> <span class="k">as</span> <span class="n">ksc_session</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.auth.identity</span> <span class="kn">import</span> <span class="n">v3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.v3</span> <span class="kn">import</span> <span class="n">client</span> <span class="k">as</span> <span class="n">keystone_v3</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">novaclient.v1_1</span> <span class="kn">import</span> <span class="n">client</span> <span class="k">as</span> <span class="n">nova_v2</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">v3</span><span class="o">.</span><span class="n">Password</span><span class="p">(</span><span class="n">auth_url</span><span class="o">=</span><span class="s">&#39;http://keystone.host/v3&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">username</span><span class="o">=</span><span class="s">&#39;user&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">password</span><span class="o">=</span><span class="s">&#39;password&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">project_name</span><span class="o">=</span><span class="s">&#39;demo&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">user_domain_name</span><span class="o">=</span><span class="s">&#39;default&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">project_domain_name</span><span class="o">=</span><span class="s">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">ksc_session</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">verify</span><span class="o">=</span><span class="s">&#39;/path/to/ca.cert&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">keystone</span> <span class="o">=</span> <span class="n">keystone_v3</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'><span class="n">nova</span> <span class="o">=</span> <span class="n">nova_v2</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">session</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keystone and nova clients will now share an authentication token fetched with keystone&rsquo;s v3 authentication.
The clients will authenticate on the first request and will re-authenticate automatically when the token expires.</p>

<p>This is a fundamental shift from the existing clients that would authenticate internally to the client and on creation so by opting to use sessions you are acknowledging that some methods won&rsquo;t work like they used to.
For example keystoneclient had an <code>authenticate()</code> function that would save the details of the authentication (user_id etc) on the client object.
This process is no longer controlled by keystoneclient and so this function should not be used, however it also cannot be removed because we need to remain backwards compatible with existing client code.</p>

<p>In converting the existing clients we consider that passing a Session means that you are acknowledging that you are using new code and are opting-in to the new behaviour.
This will not affect 90% of users who just make calls to the APIs, however if you have got hacks in place to share tokens between the existing clients or you overwrite variables on the clients to force different behaviours then these will probably be broken.</p>

<h2>Per-Client Authentication</h2>

<p>The above flow is useful for users where they want to have there one token shared between one or more clients.
If you are are an application that uses many authentication plugins (eg, heat or horizon) you may want to take advantage of using a single session&rsquo;s connection pooling or caching whilst juggling multiple authentications.
You can therefore create a session without an authentication plugin and specify the plugin that will be used with that client instance, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">global</span> <span class="n">SESSION</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">SESSION</span><span class="p">:</span>
</span><span class='line'>    <span class="n">SESSION</span> <span class="o">=</span> <span class="n">ksc_session</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">get_auth_plugin</span><span class="p">()</span>  <span class="c"># you could deserialize it from a db,</span>
</span><span class='line'>                          <span class="c"># fetch it based on a cookie value...</span>
</span><span class='line'><span class="n">keystone</span> <span class="o">=</span> <span class="n">keystone_v3</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">SESSION</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Auth plugins set on the client will override any auth plugin set on the session - but I&rsquo;d recommend you pick one method based on your application&rsquo;s needs and stick with it.</p>

<h2>Loading from a config file</h2>

<p>There is support for loading session and authentication plugins from and oslo.config CONF object.
The documentation on exactly what options are supported is lacking right now and you will probably need to look at code to figure out everything that is supported.
I promise to improve this, but to get you started you need to register the options globally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="s">&#39;keystoneclient&#39;</span>  <span class="c"># the option group</span>
</span><span class='line'><span class="n">keystoneclient</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">register_conf_options</span><span class="p">(</span><span class="n">CONF</span><span class="p">,</span> <span class="n">group</span><span class="p">)</span>
</span><span class='line'><span class="n">keystoneclient</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">register_conf_options</span><span class="p">(</span><span class="n">CONF</span><span class="p">,</span> <span class="n">group</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then load the objects where you need them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">keystoneclient</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">load_from_conf_options</span><span class="p">(</span><span class="n">CONF</span><span class="p">,</span> <span class="n">group</span><span class="p">)</span>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">ksc_session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">load_from_conf_options</span><span class="p">(</span><span class="n">CONF</span><span class="p">,</span> <span class="n">group</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'><span class="n">keystone</span> <span class="o">=</span> <span class="n">keystone_v3</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">session</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will load options that look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[keystoneclient]</span>
</span><span class='line'><span class="na">cacert</span> <span class="o">=</span> <span class="s">/path/to/ca.cert</span>
</span><span class='line'><span class="na">auth_plugin</span> <span class="o">=</span> <span class="s">v3password</span>
</span><span class='line'><span class="na">username</span> <span class="o">=</span> <span class="s">user</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">password</span>
</span><span class='line'><span class="na">project_name</span> <span class="o">=</span> <span class="s">demo</span>
</span><span class='line'><span class="na">project_domain_name</span> <span class="o">=</span> <span class="s">default</span>
</span><span class='line'><span class="na">user_domain_name</span> <span class="o">=</span> <span class="s">default</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is also support for transitioning existing code bases to new option names if they are not the same as what your application uses.</p>

<h2>Loading from CLI</h2>

<p>A very similar process is used to load sessions and plugins from an argparse parser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">argv</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="n">keystoneclient</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">register_cli_options</span><span class="p">(</span><span class="n">parser</span><span class="p">)</span>
</span><span class='line'><span class="n">keystoneclient</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">register_argparse_arguments</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">(</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">keystoneclient</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">load_from_argparse_arguments</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="n">keystoneclient</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">load_from_cli_options</span><span class="p">(</span><span class="n">args</span><span class="p">,</span>
</span><span class='line'>                                                               <span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces an application with the following options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python test.py --os-auth-plugin v3password
</span><span class='line'>usage: <span class="nb">test</span> <span class="o">[</span>-h<span class="o">]</span> <span class="o">[</span>--insecure<span class="o">]</span> <span class="o">[</span>--os-cacert &lt;ca-certificate&gt;<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-cert &lt;certificate&gt;<span class="o">]</span> <span class="o">[</span>--os-key &lt;key&gt;<span class="o">]</span> <span class="o">[</span>--timeout &lt;seconds&gt;<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-auth-plugin &lt;name&gt;<span class="o">]</span> <span class="o">[</span>--os-auth-url OS_AUTH_URL<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-domain-id OS_DOMAIN_ID<span class="o">]</span> <span class="o">[</span>--os-domain-name OS_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-project-id OS_PROJECT_ID<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-project-name OS_PROJECT_NAME<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-project-domain-id OS_PROJECT_DOMAIN_ID<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-project-domain-name OS_PROJECT_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-trust-id OS_TRUST_ID<span class="o">]</span> <span class="o">[</span>--os-user-id OS_USER_ID<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-user-name OS_USERNAME<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-user-domain-id OS_USER_DOMAIN_ID<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-user-domain-name OS_USER_DOMAIN_NAME<span class="o">]</span>
</span><span class='line'>            <span class="o">[</span>--os-password OS_PASSWORD<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is an ongoing effort to create a standardized CLI plugin that can be used by new clients rather than have people provide an &ndash;os-auth-plugin every time.
It is not yet ready, however clients can create and specify there own default plugins if &ndash;os-auth-plugin is not provided.</p>

<h2>For Client Authors</h2>

<p>To make use of the session in your client there is the <code>keystoneclient.adapter.Adapter</code> which provides you with a set of standard variables that your client should take and use with the session.
The adapter will handle the per-client authentication plugins, handle <code>region_name</code>, <code>interface</code>, <code>user_agent</code> and similar client parameters that are not part of the more global (across many clients) state that sessions hold.</p>

<p>The basic client should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>class MyClient<span class="o">(</span>object<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>    def __init__<span class="o">(</span>self, **kwargs<span class="o">)</span>:
</span><span class='line'>        kwargs.set_default<span class="o">(</span><span class="s1">&#39;user_agent&#39;</span>, <span class="s1">&#39;python-myclient&#39;</span><span class="o">)</span>
</span><span class='line'>        kwargs.set_default<span class="o">(</span><span class="s1">&#39;service_type&#39;</span>, <span class="s1">&#39;my&#39;</span><span class="o">)</span>
</span><span class='line'>        self.http <span class="o">=</span> keystoneclient.adapter.Adapter<span class="o">(</span>**kwargs<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The adapter then has <code>.get()</code> and <code>.post()</code> and other http methods that the clients expect.</p>

<h2>Conclusion</h2>

<p>It&rsquo;s great to have renewed interest in standardizing client behaviour, and I&rsquo;m thrilled to see better session adoption.
The code has matured to the point it is usable and simplifies use for both users and client authors.</p>

<p>In writing this I kept wanting to link out to official documentation and realized just how lacking it really is.
Some explanation is available on the <a href="http://docs.openstack.org/developer/python-keystoneclient/using-sessions.html">official python-keystoneclient docs pages</a>, there is also <a href="http://docs.openstack.org/developer/python-keystoneclient/api/keystoneclient.auth.identity.html">module documentation</a> however this is definetly an area in which we (read I) am a long way behind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requests-mock]]></title>
    <link href="http://www.jamielennox.net/blog/2014/08/26/requests-mock/"/>
    <updated>2014-08-26T12:26:23+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/08/26/requests-mock</id>
    <content type="html"><![CDATA[<p>Having just release v0.5 of <a href="https://pypi.python.org/pypi/requests-mock">requests-mock</a> and having it used by both keystoneclient and novaclient with others in the works I thought I&rsquo;d finally do a post explaining what it is and how to use it.</p>

<h2>Motivation</h2>

<p>I was the person who brought <a href="http://falcao.it/HTTPretty/">HTTPretty</a> into the OpenStack requirements.</p>

<p>The initial reason for this was that keystoneclient was transitioning from the <a href="https://docs.python.org/2/library/httplib.html">httplib</a> library to <a href="http://docs.python-requests.org/en/latest/">requests</a> and I needed to prove that there was no changes to the HTTP requests during the transition.
HTTPretty is a way to mock HTTP responses at the socket level, so it is not dependant on the HTTP library you use and for this it was fairly successful.</p>

<p>As part of that transition I converted all the unit tests so that they actually traversed through to the requesting layer and found a number of edge case bugs because the responses were being mocked out above this point.
I have therefore advocated that the clients convert to mocking at the request layer rather than stubbing out returned values.
I&rsquo;m pretty sure that this doesn&rsquo;t adhere strictly to the unit testing philosophy of testing small isolated changes, but our client libraries aren&rsquo;t that deep and I&rsquo;d honestly prefer to just test the whole way through and find those edge cases.</p>

<p>Having done this has made it remarkably easier to transition to using sessions in the clients as well, because we are testing the whole path down to making HTTP requests for all the resource tests so again have assurances that the HTTP requests being sent are equivalent.</p>

<p>At the same time we&rsquo;ve had a number of problems with HTTPretty:</p>

<ul>
<li>It was the lingering last requirement for getting Python 3 support. Thanks to Cyril Roelandt for finally getting that fixed.</li>
<li>For various reasons it is difficult for the distributions to package.</li>
<li>It has a bad habit of doing backwards incompatible, or simply broken releases. The current requirements string is: <code>httpretty&gt;=0.8.0,!=0.8.1,!=0.8.2,!=0.8.3</code></li>
<li>Because it acts at the socket layer it doesn&rsquo;t always play nicely with other things using the socket. For example it has to be disabled for live memcache tests.</li>
<li>It pins its requirements on pypi.</li>
</ul>


<p>Now I feel like I&rsquo;m just ranting.
There are additional oddities I found in trying to fix these upstream but this is not about bashing HTTPretty.</p>

<h2>requests-mock</h2>

<p>requests-mock follows the same concepts allowing users to stub out responses to HTTP requests, however it specifically targets the requests library rather than stubbing the socket.
All the OpenStack clients have been converted to requests at this point, and for the general audience if you are writing HTTP code in Python you should be using requests.</p>

<p>Note: a lot of what is used in these examples is only available since the 0.5 release.
The current OpenStack requirements still have 0.4 so you&rsquo;ll need to wait for some of the new syntax.</p>

<p>The intention of requests-mock is to work in as similar way to requests itself as possible.
Hence all the variable names and conventions should be as close to a <code>requests.Response</code> as possible.
For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests_mock</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://www.google.com&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&#39;Not really google&#39;</span><span class="p">,</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">218</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="s">u&#39;Not really google&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">218</span>
</span></code></pre></td></tr></table></div></figure>


<p>So <code>text</code> in the mock equates to <code>text</code> in the response and similarly for <code>status_code</code>.
Some more advanced usage of the requests library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;hello&#39;</span><span class="p">:</span> <span class="s">&#39;world&#39;</span><span class="p">},</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;test&#39;</span><span class="p">:</span> <span class="s">&#39;header&#39;</span><span class="p">})</span>
</span><span class='line'><span class="o">...</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="s">u&#39;{&quot;hello&quot;: &quot;world&quot;}&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;hello&#39;</span><span class="p">:</span> <span class="s">u&#39;world&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">200</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">headers</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;test&#39;</span><span class="p">:</span> <span class="s">&#39;header&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;test&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;header&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use callbacks to create responses dynamically:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">_request_callback</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">context</span><span class="o">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="mi">201</span>
</span><span class='line'><span class="o">...</span>     <span class="n">context</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;test&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;header&#39;</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="p">{</span><span class="s">&#39;request&#39;</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="n">m</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">_request_callback</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="s">&#39;data&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">201</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">headers</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;test&#39;</span><span class="p">:</span> <span class="s">&#39;header&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="s">u&#39;request&#39;</span><span class="p">:</span> <span class="s">u&#39;data&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that because the callback was passed as the <code>json</code> parameter the return type is expected to be the same as if you had passed it as a predefined <code>json=blob</code> value.
If you wanted to return <code>text</code> the callback would be on the <code>text</code> parameter.</p>

<h2>Cool tricks</h2>

<p>So rather than give a lot of examples i&rsquo;ll just highlight some of the interesting things you can do with the library and how to do it.</p>

<ul>
<li>Queue mutliple responses for a url, each element of the list is interpreted as if they were <code>**kwargs</code> for a response.
In this case every request other than the first will get a 401 error:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="p">[{</span><span class="s">&#39;json&#39;</span><span class="p">:</span> <span class="n">_request_callback</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;text&#39;</span><span class="p">:</span> <span class="s">&#39;Not Allowed&#39;</span><span class="p">,</span> <span class="s">&#39;status_code&#39;</span><span class="p">:</span> <span class="mi">401</span><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>See the history of requests:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">request_history</span>  <span class="c"># all requests</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">last_request</span>  <span class="c"># the last request</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">call_count</span>  <span class="c"># number of requests</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">called</span>  <span class="c"># boolean, True if called</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match on the only the URL path:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/path/only&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match on any method:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>or match on any URL:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match on headers that are part of the request (useful for distinguishing between multiple requests to the same URL):</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">request_headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;X-Auth-Token&#39;</span><span class="p">:</span> <span class="s">&#39;XXXXX&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>be used as a function decorator</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requests_mock.mock</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_a_thing</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>   <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&#39;resp&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Try it!</h2>

<p>There is a lot more it can do and if you want to know more you can check out:</p>

<ul>
<li><a href="http://requests-mock.readthedocs.org/">Read the Docs</a></li>
<li><a href="https://pypi.python.org/pypi/requests-mock">PyPi</a></li>
<li><a href="https://git.openstack.org/cgit/stackforge/requests-mock">git repository</a></li>
</ul>


<p>As a final selling point because it was built particularly around OpenStack needs it is:</p>

<ul>
<li>Easily integrated with the <a href="https://pypi.python.org/pypi/fixtures">fixtures</a> library.</li>
<li>Hosted on stackforge and reviewed via <a href="https://review.openstack.org/#/q/project:stackforge/requests-mock+is:open,n,z">Gerrit</a>.</li>
<li>Continuously tested against at least keystoneclient and novaclient to prevent backwards incompatible changes.</li>
<li>Accepted as part of OpenStack requirements.</li>
</ul>


<p>Patches and <a href="https://bugs.launchpad.net/requests-mock">bug reports</a> are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands for Messy People]]></title>
    <link href="http://www.jamielennox.net/blog/2014/08/15/git-commands-for-messy-people/"/>
    <updated>2014-08-15T10:59:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/08/15/git-commands-for-messy-people</id>
    <content type="html"><![CDATA[<p>I am terrible at keeping my git branches in order.
Particularly since I work across multiple machines and forget where things are I will often have multiple branches with different names being different versions of the same review.</p>

<p>On a project I work on frequently I currently have 71 local branches which are a mix of my code, some code reviews, and some branches that were for trialling ideas.
<a href="https://pypi.python.org/pypi/git-review">git review</a> at least prefixes branches it downloads with <code>review/</code> but that doesn&rsquo;t help to figure out what was happening with local branches labelled <code>auth</code> through <code>auth-4</code>.</p>

<p>However this post isn&rsquo;t about me fixing my terrible habit it&rsquo;s about two git commands which help me work with the mess.</p>

<p>The first is an alias which I called <code>branch-date</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>    <span class="na">branch-date</span> <span class="o">=</span> <span class="s">&quot;!git for-each-ref --sort=committerdate --format=&#39;%1B[32m%(committerdate:iso8601) %1B[34m%(committerdate:relative) %1B[0;m%(refname:short)&#39; refs/heads/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives a nicely formatted list of branches in the project sorted by the last time they were committed to and how long ago it was.
So if I know I&rsquo;m looking for a branch that I last worked on last week I can quickly locate those branches.</p>

<p><img class="basic-alignment center" src="http://www.jamielennox.net/images/branch-date.png" title="Naming scheme win!" alt="List of branches ordered by date"></p>

<p>The next is a script to figure out which of my branches have made it through review and have been merged upstream which I called <code>branch-merged</code>.</p>

<p>Using git you can already call <code>git branch --merged master</code> to determine which branches are fully merged into the <code>master</code> branch.
However this won&rsquo;t take into account if a later version of a review was merged, in which case I can probably get rid of that branch.</p>

<p>We can figure this out by using the <code>Commit-Id:</code> field of our Gerrit reviews.</p>

<div><script src='https://gist.github.com/a7f8080e42ec795945b8.js?file=git-branch-merged.sh'></script>
<noscript><pre><code>#!/bin/bash

# create an associative array of all the changes
declare -A MERGED
for commit in `git log master | grep Change-Id | cut -d : -f 2`; do
    MERGED[&quot;$commit&quot;]=1
done

for branch in `git branch | grep -v master`; do
    found=1

    # for every commit on the branch check to ensure its in master
    for commit in `git log $branch | grep Change-Id | cut -d : -f 2`; do
        if [[ ! ${MERGED[&quot;$commit&quot;]} ]]; then
            # if it&#39;s not in master then this branch wasn&#39;t merged so we
            # want to break out and not print its name.
            found=0
            break
        fi
    done

    if [ $found = 1 ]; then
        # if all of the Commit-Ids on branch were also in master then
        # print out the branch name because we can probably get rid of it
        echo $branch
    fi
done</code></pre></noscript></div>


<p>So print out the branches where all the <code>Commit-Id</code>s are also in master.
It&rsquo;s not greatly efficient and if you are working with code bases with long histories you might need to limit the depth, but given that it doesn&rsquo;t run often it completes quickly enough.</p>

<p>There&rsquo;s no guarantee that there wasn&rsquo;t something new in those branches, but most likely it was an earlier review or test code that is no longer relevant.
I was considering a tool that could use the <code>Commit-Id</code> to figure out from gerrit if a branch is an exact match to one that was previously up for review and so contained no possibly useful experimenting code, but teaching myself to clean up branches as I go is probably a better use of my time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Identity_uri in Auth Token Middleware]]></title>
    <link href="http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware/"/>
    <updated>2014-05-21T14:54:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware</id>
    <content type="html"><![CDATA[<p>As part of the 0.8 release of keystoneclient (2014-04-17) we made an update to the way that you configure auth_token middleware in OpenStack.</p>

<p>Previously you specify the path to the keystone server as a number of individual parameters such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[keystone_authtoken]
</span><span class='line'>auth_protocol = http
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_host = 127.0.0.1
</span><span class='line'>auth_admin_prefix =</span></code></pre></td></tr></table></div></figure>


<p>This made sense in code when using httplib for communication where you use each of those independent pieces.
However we removed httplib a number of releases ago and now simply reconstruct the full URL in code in the form:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%(auth_protocol)s://%(auth_host)s:%(auth_port)d/%(auth_admin_prefix)s</span></code></pre></td></tr></table></div></figure>


<p>This format is much more intuitive for configuration and so should now be used with the key <strong>identity_uri</strong>. e.g.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[keystone_authtoken]
</span><span class='line'>identity_uri = http://127.0.0.1:35357</span></code></pre></td></tr></table></div></figure>


<p>Using the original format will continue to work but you&rsquo;ll see a deprecation message like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARNING keystoneclient.middleware.auth_token [-] Configuring admin URI using auth fragments. This is deprecated, use 'identity_uri' instead.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client Session Objects]]></title>
    <link href="http://www.jamielennox.net/blog/2014/02/24/client-session-objects/"/>
    <updated>2014-02-24T13:32:00+11:00</updated>
    <id>http://www.jamielennox.net/blog/2014/02/24/client-session-objects</id>
    <content type="html"><![CDATA[<p>Keystoneclient has recently introduced a <em>Session</em> object.
The concept was discussed and generally accepted at the Hong Kong Summit that keystoneclient as the root of authentication (and arguably security) should be responsible for transport (HTTP) and authentication across all the clients.</p>

<p>The majority of the functionality in this post is written and up for review but has <strong>not yet been committed</strong>.
I write this in an attempt to show the direction of clients as there is currently a lot of talk around projects such as the <a href="https://wiki.openstack.org/wiki/SDK-Development">OpenStack-SDK</a>.</p>

<p>When working with clients you would first create an authentication object, then create a session object with that authentication and then re-use that session object across all the clients you instantiate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.auth.identity</span> <span class="kn">import</span> <span class="n">v2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient</span> <span class="kn">import</span> <span class="n">session</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.v2_0</span> <span class="kn">import</span> <span class="n">client</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">v2</span><span class="o">.</span><span class="n">Password</span><span class="p">(</span><span class="n">auth_url</span><span class="o">=</span><span class="s">&#39;https://localhost:5000/v2.0&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">username</span><span class="o">=</span><span class="s">&#39;user&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">password</span><span class="o">=</span><span class="s">&#39;pass&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">tenant_name</span><span class="o">=</span><span class="s">&#39;demo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sess</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">auth</span><span class="o">=</span><span class="n">auth</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">verify</span><span class="o">=</span><span class="s">&#39;/path/to/ca.pem&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ksclient</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">sess</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;RegionOne&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># other clients can be created sharing the sess parameter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now whenever you want to make an authenticated request you just indicated it as part of the request call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># requests with authenticated are sent with a token</span>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://localhost:35357/v2.0/users&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">authenticated</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was pretty much the extent of the initial proposal, however in working with the plugins I have come to realize that authentication is responsible for much more than simply getting a token.</p>

<p>A large part of the data in a keystone token is the service catalog.
This is a listing of the services known to an OpenStack deployment and the URLs that we should use when accessing those services.
Because of the disjointed way in which clients have been developed this service catalog is parsed by each client to determine the URL with which to make API calls.</p>

<p>With a session object in control of authentication and the service catalog there is no reason for a client to know its URL, just what it wants to communicate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/users&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">authenticated</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">service_type</span><span class="o">=</span><span class="s">&#39;identity&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">endpoint_type</span><span class="o">=</span><span class="s">&#39;admin&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;RegionOne&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The values of <code>service_type</code> and <code>endpoint_type</code> are well known and constant to a client, <code>region_name</code> is generally passed in when instantiating (if required).
Requests made via the client object will have these parameters added automatically, so given the client from above the following call is exactly the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">ksclient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/users&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where I feel that this will really begin to help though is in dealing with the transition between API versions.</p>

<p>Currently deployments of OpenStack put a versioned endpoint in the service catalog eg for identity <code>http://localhost:5000/v2.0</code>.
This made sense initially however now as we try to transition people to the V3 identity API we find that there is no backwards compatible way to advertise both the v2 and v3 services.
The agreed solution long-term is that entries in the service catalog should not be versioned eg. <code>http://localhost:5000</code> as the root path of a service will list the available versions.
So how do we handle this transition across the 8+ clients?
Easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">users</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/users&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">authenticated</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">service_type</span><span class="o">=</span><span class="s">&#39;identity&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">endpoint_type</span><span class="o">=</span><span class="s">&#39;admin&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">region_name</span><span class="o">=</span><span class="s">&#39;RegionOne&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">version</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>  <span class="c"># just specify the version you need</span>
</span><span class='line'><span class="k">except</span> <span class="n">keystoneclient</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">EndpointNotFound</span><span class="p">:</span>
</span><span class='line'>    <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&#39;No v2 identity endpoint available&#39;</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This solution also means that when we have a suitable hack for the transition to unversioned endpoints it needs only be implemented in one place.</p>

<p>Reliant on this is a means to discover the available versions of all the OpenStack services.
Turns out that in general the projects are similar enough in structure that it can be done with a few minor hacks.
For newer projects there is now a definitive specification <a href="https://wiki.openstack.org/wiki/VersionDiscovery">on the wiki</a>.</p>

<p>A major advantage of this common approach is we now have a standard way of determining whether a version of a project is available in this cloud.
Therefore we get client version discovery pretty much for free:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">sess</span><span class="o">.</span><span class="n">is_available</span><span class="p">(</span><span class="n">service_type</span><span class="o">=</span><span class="s">&#39;identity&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">version</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">ksclient</span> <span class="o">=</span> <span class="n">v2_0</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">sess</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;Can&#39;t create a v2 identity client&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a little verbose as a client knows that information, so we can extract a wrapper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">v2_0</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="o">.</span><span class="n">is_available</span><span class="p">(</span><span class="n">sess</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ksclient</span> <span class="o">=</span> <span class="n">v2_0</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">sess</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ksclient</span> <span class="o">=</span> <span class="n">keystoneclient</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">session</span><span class="o">=</span><span class="n">sess</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">version</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="n">ksclient</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># do stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the session object has evolved from a pure transport level object and this departure is somewhat concerning as I don&rsquo;t like mixing layers of responsibility.
However in practice we have standardized on the <a href="http://www.python-requests.org">requests</a> library to abstract much of this away and the Session object is providing helpers around this.</p>

<p>So, along with standardizing transport, by using the session object like this we can:</p>

<ul>
<li>reduce the basic client down to an object consisting of a few variables indicating the service type and version required.</li>
<li>finally get a common service discovery mechanism for all the clients.</li>
<li>shift the problem of API version migration onto someone else - probably me.</li>
</ul>


<h4>Disclaimers and Notes</h4>

<ul>
<li><p>The examples provided above use keystoneclient and the &lsquo;identity&rsquo; service purely because this is what has been implemented so far.
In terms of CRUD operations keystoneclient is essentially the same as other client in that it retrieves its endpoint from the service catalog and issues requests to it, so the approach will work equally well.</p></li>
<li><p>Currently none of the other clients rely upon the session object, I have been waiting on the inclusion of authentication plugins and service discovery before making this push.</p></li>
<li><p>Region handling is still a little awkward when using the clients.
I blame this completely on the fact that region handling is awkward on the servers.
In Juno we should have hierarchical regions and then it may make sense to allow <code>region_name</code> to be set on a session rather than per client.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing With .pyc]]></title>
    <link href="http://www.jamielennox.net/blog/2014/02/18/dealing-with-pyc/"/>
    <updated>2014-02-18T11:08:00+11:00</updated>
    <id>http://www.jamielennox.net/blog/2014/02/18/dealing-with-pyc</id>
    <content type="html"><![CDATA[<p>I have often found that when dealing with multiple branches and refactoring patches I get caught out by left over *.pyc files from python files that don&rsquo;t exist on this branch.
This bit me again recently so I went looking for options.</p>

<p>A useful environment variable that I found via some stackoverflow questions is: <a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE">PYTHONDONTWRITEBYTECODE</a> which, when set, prevents python from writing .pyc and .pyo files.
This is not something that I want to set permanently on my machine but is great for development.</p>

<p>The other tool I use for all my python projects is <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> which allows you to isolate project dependencies and environments in what I think is a more intuitive way than with virtualenv directly.</p>

<p>Armed with the simple idea that these two concepts should be able to work together I found I was not the first person to think of this.
There are other guides out there but the basic concept is simply to set PYTHONDONTWRITEBYTECODE when we activate a virtualenv and reset it when we deactivate it.</p>

<p>Easy.</p>

<p>Add to <em>~/.virtualenvs/postactivate</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">_PYTHONDONTWRITEBYTECODE</span><span class="o">=</span><span class="nv">$PYTHONDONTWRITEBYTECODE</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONDONTWRITEBYTECODE</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Add to <em>~/.virtualenvs/predeactivate</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PYTHONDONTWRITEBYTECODE</span><span class="o">=</span><span class="nv">$_PYTHONDONTWRITEBYTECODE</span>
</span><span class='line'><span class="nb">unset </span>_PYTHONDONTWRITEBYETCODE
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keystone Token Binding]]></title>
    <link href="http://www.jamielennox.net/blog/2013/10/22/keystone-token-binding/"/>
    <updated>2013-10-22T11:48:00+11:00</updated>
    <id>http://www.jamielennox.net/blog/2013/10/22/keystone-token-binding</id>
    <content type="html"><![CDATA[<p>With the Havana release of OpenStack, Keystone gains the ability to issue and verify tokens &ldquo;bound&rdquo; to some authentication mechanism.
To understand the reason for this feature we need to first consider the security model of the current token architecture.</p>

<p>OpenStack tokens are what we call &ldquo;bearer tokens&rdquo;.
The term seems to have come out of the OAuth movement but means that whoever has the token has all the rights associated with that person.
This is not an uncommon situation on the Internet, it is the way basic auth (username and password), cookies, and session ids all work, and one of the reasons that SSL is so important when authenticating against a website.
If an attacker was to get your token then they have all the rights of that token for as long as it is valid, including permission to reissue a token or change your password.
While all of these mechanism are symmetric secrets, they are only shared between two end points.
Keystone tokens are shared across all of the public services in an OpensStack deployment.</p>

<p>As OpenStack grows and this token is presented to an ever increasing list of services the vulnerability of this mechanism increases.
So what can we do about it?
The typical answer, particularly for the enterprise, is to use Kerberos or x509 client certificates.
This is a great solution but we don&rsquo;t want to have each service dealing with different authentication mechanisms, that&rsquo;s what Keystone does.</p>

<h2>What is a &ldquo;bound token&rdquo;?</h2>

<p>A &ldquo;bound token&rdquo; is a regular keystone token with some additional information that indicates that the token may only be used in conjunction with the specified external authentication mechanism.
Taking the example of Kerberos, when a token is issued Keystone embeds the name of the Kerberos principle into the token.
When this token is then presented to another service the service notices the bind information and ensures that Kerberos authentication was used and that the same user is making the request.</p>

<p>So how does this help to protect token hijacking?
To give an example:</p>

<ol>
<li>Alice connects to Keystone using her Kerberos credentials and gets a token.
 Embedded within this token is her Kerberos principal name <code>alice@ACME.COM</code>.</li>
<li>Alice authenticates to HaaS (hacked as a service) using her token and Kerberos credentials and is allowed to perform her operations.</li>
<li>Bob, who has privileged access to HaaS, records the token that Alice presented to the service (or otherwise gets Alice&rsquo;s token)</li>
<li>Bob attempts to connect to Keystone as Alice to change her password.
 He connects to keystone with his own Kerberos credentials <code>bob@ACME.COM</code>.
 Because these credentials do not match the ones that were present when the token was created his access is disallowed.</li>
</ol>


<p>It does not necessarily mean that the user initially authenticated themselves by there Kerberos credentials, they may have used there regular username and password.
It simply means that the user who created the token has said that they are also the owner of this Kerberos principal (note: that it is tied to the principal, not a ticket so it will survive ticket re-issuing) and the token should not be authenticated in future without it present.</p>

<h2>What is implemented?</h2>

<p>Currently tokens issued from Keystone can be bound to a Kerberos principal.
Extending this mechanism to x509 client certificates should be a fairly simple exercise but will not be included in the Havana release.</p>

<p>A patch to handle bind checking in auth_token middleware is currently under review to bring checking to other services.</p>

<p>There are however a number of problems with enforcing bound tokens today:</p>

<ul>
<li>Kerberos authentication is not supported by the eventlet http server (the server that drives most of the OpenStack web services), and so there is no way to authenticate to the server to provide the credentials.
This essentially restricts bind checking to services running in httpd, which to the best of my knowledge is currently only keystone and swift.</li>
<li>None of the clients currently support connecting with Kerberos authentication.
The option was added to Keystoneclient as a proof of concept but I am hoping that this can be solved across all clients by standardizing the way they communicate rather than having to add and maintain support in each individual client.
There will also be the issue of how to configure the servers to use these clients correctly.</li>
<li>Kerberos tickets are issued to users, not hosts, and typically expire after a period of time.
To allow unattended servers to have valid Kerberos credentials requires a way of automatically refreshing or fetching new tickets.
I am told that there is support for this scenario coming in Fedora 20 but I am not sure what it will involve.</li>
</ul>


<h2>Configuring Token Binding</h2>

<p>The new argument to enable token binding in <code>keystone.conf</code> is:</p>

<pre><code>[token]

# External auth mechanisms that should add bind information to token.
# eg kerberos, x509
bind = kerberos
</code></pre>

<p>As mentioned currently only the value Kerberos is currently supported here.
One of the next supported mechanisms will be x509 client certificates.</p>

<p>To enable token bind authentication in <code>keystone.conf</code> is:</p>

<pre><code>[token]
# Enforcement policy on tokens presented to keystone with bind information.
# One of disabled, permissive, strict, required or a specifically required bind
# mode e.g. kerberos or x509 to require binding to that authentication.
enforce_token_bind = permissive
</code></pre>

<p>As illustrated by the comments the possible values here are:</p>

<ul>
<li><code>disabled</code>: Disables token bind checking.</li>
<li><code>permissive</code>: Token bind information will be verified if present.
 If there is bind information for a token and the server does not know how to verify that information then it will be ignored and the token will be allowed.
 This is the new default value and should have no effect on existing systems.</li>
<li><code>strict</code>: Like permissive but if unknown bind information is present then the token will be rejected.</li>
<li><code>required</code>: Tokens will only be allowed if bind information is present and verified.</li>
<li>A specific form of bind information is present and verified.
The only currently available value here is <code>kerberos</code> indicating that a token must be bound to a Kerberos principal to be accepted.</li>
</ul>


<h2>In Conclusion</h2>

<p>For a deployment with access to a Kerberos or x509 infrastructure token binding will dramatically increase your user&rsquo;s security.
Unfortunately the limitations of Kerberos within OpenStack don&rsquo;t really make this a viable deployment option in Havana.
Watch this space however as we add x509 authentication and binding, and improve Kerberos handling throughout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keystone With HTTPd in Devstack]]></title>
    <link href="http://www.jamielennox.net/blog/2013/09/30/keystone-with-httpd-in-devstack/"/>
    <updated>2013-09-30T13:53:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2013/09/30/keystone-with-httpd-in-devstack</id>
    <content type="html"><![CDATA[<p>Keystone has been slowly pushing away from being deployed with <a href="http://eventlet.net">Eventlet</a> and the <code>keystone-all</code> script in favour of the more traditional httpd mod_wsgi application method.
There has been discussion of Eventlet&rsquo;s place in OpenStack <a href="http://davidhadas.wordpress.com/2012/05/14/asynchronousio/">before</a> and its (mis)use has led to numerous subtle bugs and problems, however from my opinion in Keystone the most important reasons to move away from Eventlet are:</p>

<ul>
<li>Eventlet does not support Kerberos authentication.</li>
<li>pyOpenSSL only releases the GIL around some SSL verification commands.
This leads to a series of hacks to prevent long running crypto commands blocking Eventlet threads and thus the entire Keystone process.</li>
<li>There are already a lot of httpd authentication/authorization plugins that we could make use of in Keystone.</li>
<li>It&rsquo;s faster to have things handled by httpd modules in C than in Python.</li>
</ul>


<p>Keystone has shipped with sample WSGI scripts and httpd configuration files since Foslom and documentation for how to use them <a href="http://docs.openstack.org/developer/keystone/apache-httpd.html">is available</a> however most guides and service wrappers (upstart, systemd etc) will use the <code>keystone-all</code> method.</p>

<p>To get some wider adoption and understanding of the process I&rsquo;ve just added Keystone with httpd support into devstack.
Simply set:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>APACHE_ENABLED_SERVICES=key</span></code></pre></td></tr></table></div></figure>


<p>in your localrc or environment variables and re-run <code>./stack.sh</code> to try it out.</p>

<p>P.S. Swift can also be deployed this way by adding <code>swift</code> to the (comma separated) services list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIClient Communications]]></title>
    <link href="http://www.jamielennox.net/blog/2013/09/27/apiclient-communications/"/>
    <updated>2013-09-27T15:27:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2013/09/27/apiclient-communications</id>
    <content type="html"><![CDATA[<p>There has been interest recently in porting novaclient&rsquo;s authentication plugin system to the rest of the OpenStack client libraries and moving the plugins into keystoneclient.
At a similar time <a href="http://aababilov.wordpress.com">Alessio Ababilov</a> started trying to introduce the concept of a <a href="http://openstackgd.wordpress.com/2013/01/12/preconditions-for-common-openstack-client-library/">common base client</a> into keystoneclient.
This is a fantastic idea and one that is well supported by the Keystone, Oslo and I&rsquo;m sure other teams.
I&rsquo;ve been referring to this move as APIClient as that is the name of the folder in Oslo code.
At its core is a change in how clients communicate that will result in some significant changes to the base client objects and incorporate these plugins.</p>

<p>Keystone is interested in handling how communication is managed within OpenStack, not just for tokens but as we bring in client certificate and kerberos authentication it will need to have influence over the requests being sent.
After discussing the situation with Alessio he agreed to let me take his base work and start the process of getting these changes into keystoneclient with the intent that this pattern be picked up by other OpenStack clients.
This has unfortunately been a slower process than I would have liked and I think it is hampered by a lack of clear understanding in what is trying to be achieved, which I hope to address with this post.
What follows is in the vein of Alessio&rsquo;s ideas and definitely a result of his work but is my own interpretation of the problem and the implementation has been rewritten from that initial work.</p>

<p>Most OpenStack clients have the concept of a HTTPClient which abstracts the basic communication with a server, however projects differ in what this object is and how it is used.
Novaclient creates an instance of a HTTPClient object which it saves as <code>self.client</code> (for yet another candidate for what a client object is).
Much of what the novaclient object does then in terms of setting and using authentication plugins is simply a wrapper around calls to the HTTPClient object.
Managers (the part of client responsible for a resource eg user, project etc) are provided with a reference to the base client object (this time saved as <code>api</code>) and so make requests in the form <code>self.api.client.get</code>.
Keystoneclient subclasses HTTPClient and managers make calls in the form <code>self.api.get</code>.
Other projects can go either way depending on which client they were using as reference.</p>

<p>My <em>guess</em> here is that when keystoneclient was initially split out from novaclient the subclassing of HTTPClient was intentional, such that keystoneclient would provide an authenticated HTTPClient that novaclient would use.
Keystoneclient however has its own managers and requirements and the projects have sufficiently diverged so that it no longer fits into this role.
To this day novaclient does not use keystoneclient (in any way) and introduced authentication plugins instead.</p>

<p>If there is going to be a common communication framework then there must be a decision between:</p>

<ul>
<li>Standardizing on a common base client class that is capable of handling communication (as keystoneclient does).</li>
<li>Create a standalone communication object that clients make use of (as novaclient does).</li>
</ul>


<p>The APIClient design goes for the latter.
We create a communication object that can be used by any type of client <em>and</em> be reused by different instances of clients (which novaclient does not currently allow).
This communication object is passed between clients deprecating some of the ever increasing list of parameters passed to clients and changes the flow from authenticating a client to authenticating a channel that clients can make use of.
This centralizes authentication and token fetching (including kerberos and client certs), catalog management and endpoint selection and will let us address caching, HTTP session management etc in the future.</p>

<p>In the initial APIClient this object was the new HTTPClient, however this term was so abused I am currently using ClientSession (as it is built on the requests library and is similar to the requests.Session concept) but debate continues.</p>

<p>This is where authentication plugins will live so that any communication through a ClientSession object can request a token added from the plugin.
Maintaining the plugin architecture is preferred here to simply having multiple ClientSession subclasses to allow independent storing and caching of authentication, plugin discovery, and changing or renewing authentication.</p>

<p>So an example of the new workflow is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.auth.identity</span> <span class="kn">import</span> <span class="n">v3_auth</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient</span> <span class="kn">import</span> <span class="n">session</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">keystoneclient.v3</span> <span class="kn">import</span> <span class="n">client</span> <span class="k">as</span> <span class="n">v3_client</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">novaclient.v1_1</span> <span class="kn">import</span> <span class="n">client</span>
</span><span class='line'>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">v3_auth</span><span class="o">.</span><span class="n">Auth</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#39;username&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">password</span><span class="o">=</span><span class="s">&#39;password&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">project_id</span><span class="o">=</span><span class="s">&#39;project_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">auth_url</span><span class="o">=</span><span class="s">&#39;https://keystone.example.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">client_session</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">ClientSession</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">keystone_client</span> <span class="o">=</span> <span class="n">v3_client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">client_session</span><span class="p">)</span>
</span><span class='line'><span class="n">nova_client</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">client_session</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is obviously a little longer than the current method but I&rsquo;m sure that the old syntax can be maintained for when you only need a single client.</p>

<p>Implementations of this are starting to go into review on keystoneclient.
For the time being some features from nova such as authentication plugins specifying CLI arguments are not being considered until we can ensure that the new system meets at least the current functionality.</p>

<p>The major problem found so far is maintaining API compatibility.
Much of what is currently on keystoneclient that will be moved is defined publicly and cannot simply be thrown away even though they are typically attributes and abstract functions that a user should have no need of.</p>

<p>Hopefully this or something very similar will be coming to the various OpenStack clients soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Access to Libvirtd]]></title>
    <link href="http://www.jamielennox.net/blog/2013/04/09/user-access-to-libvirtd/"/>
    <updated>2013-04-09T11:50:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2013/04/09/user-access-to-libvirtd</id>
    <content type="html"><![CDATA[<p>To enable access to libvirtd without sudo:</p>

<ol>
<li>Create a group for privileged users, I called mine <code>libvirt</code> and add your users to it.</li>
<li>Create a new file in <code>/etc/polkit-1/rules.d/</code> i called mine <code>50-libvirt-group.rules</code></li>
<li>Add the following function:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>polkit.addRule(function(action, subject) {
</span><span class='line'>    if (action.id == "org.libvirt.unix.manage" &&
</span><span class='line'>        subject.isInGroup('libvirt') ) {
</span><span class='line'>        return polkit.Result.YES;
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cryptographic Message Syntax]]></title>
    <link href="http://www.jamielennox.net/blog/2012/11/11/cryptographic-message-syntax/"/>
    <updated>2012-11-11T17:13:00+11:00</updated>
    <id>http://www.jamielennox.net/blog/2012/11/11/cryptographic-message-syntax</id>
    <content type="html"><![CDATA[<p>CMS is the <a href="http://en.wikipedia.org/wiki/IETF">IETF</a>&rsquo;s standardized approach to cryptographically secure messages.
It provides a BER encoded, ASN1 defined means of communicating the parameters and data of a message between recipients.</p>

<p>The most recent definitions come from <a href="http://tools.ietf.org/html/rfc5652">RFC 5652</a> and it does do a good job of explaining how each operation works and what is required, it even provides some usage examples.
What is missing is a simple rundown of the different types of messages that goes into more detail than <a href="http://en.wikipedia.org/wiki/Cryptographic_Message_Syntax">Wikipedia</a> but doesn&rsquo;t have you jumping straight into the RFC.</p>

<p>Data section should be thought of as a way of using a cryptographic function rather than a message all on its own.
Correlations will become obvious but EncryptedData is simply a way of portraying symmetrically encrypted data and AuthenticatedData is essentially a way of addressing and sending a MAC.
As with using normal crypto functions you will often need a combination to provide the required security and so CMS messages are designed to contain nested data sections.
A common example is a Signed data wrapping an Enveloped data to provide confidentiality and authenticity, or an Enveloped Digest message for confidentiality and integrity.</p>

<p>I realize this is by no means a comprehensive rundown but it should frame the situation and give an overview before you get to the RFC.
The meat of the post is a list of each CMS data type and the most important parts of the ASN1 definition as it should allow you to figure out how each segment is used and the chain of data you will want in your message.</p>

<h3>EncryptedData</h3>

<p>The most simple CMS message just takes a symmetric key and encrypt some data.
How to give that key to someone else is outside this message.
It&rsquo;s defined as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EncryptedData ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  encryptedContentInfo EncryptedContentInfo,
</span><span class='line'>  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }</span></code></pre></td></tr></table></div></figure>


<h3>DigestedData</h3>

<p>Provides a digest along with the plaintext.
Typically this is then wrapped by an EnvelopedData or such to provide Integrity to a message.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DigestedData ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  digestAlgorithm DigestAlgorithmIdentifier,
</span><span class='line'>  encapContentInfo EncapsulatedContentInfo,
</span><span class='line'>  digest Digest }</span></code></pre></td></tr></table></div></figure>


<h3>SignedData</h3>

<p>SignedData messages allow any number of certificates to sign a payload.
In the regular signing way, each signer creates a digest of the payload and encrypts it with their private key.
The message contains the certificate of the signers and can contain a store of certificates and CRLs for cert path validation by the receiver.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SignerInfo ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  sid SignerIdentifier,
</span><span class='line'>  digestAlgorithm DigestAlgorithmIdentifier,
</span><span class='line'>  signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
</span><span class='line'>  signatureAlgorithm SignatureAlgorithmIdentifier,
</span><span class='line'>  signature SignatureValue,
</span><span class='line'>  unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>SignedData ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  digestAlgorithms DigestAlgorithmIdentifiers,
</span><span class='line'>  encapContentInfo EncapsulatedContentInfo,
</span><span class='line'>  certificates [0] IMPLICIT CertificateSet OPTIONAL,
</span><span class='line'>  crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
</span><span class='line'>  signerInfos SignerInfos }</span></code></pre></td></tr></table></div></figure>


<h3>EnvelopedData</h3>

<p>EnvelopedData allows you to address encrypted data to any number of specific recipients.
The most common recipients are a certificate (or the private key of), a symmetric key or a password.
The payload is encrypted with a symmetric key and then this key is encrypted with the key provided by the recipient (or PBKDF for passwords).
So on decoding the recipient will decrypt the symmetric key from the RecipientInfo associated with them and then use that to decrypt the plaintext mesage.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EnvelopedData ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
</span><span class='line'>  recipientInfos RecipientInfos,
</span><span class='line'>  encryptedContentInfo EncryptedContentInfo,
</span><span class='line'>  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
</span><span class='line'>
</span><span class='line'>RecipientInfo ::= CHOICE {
</span><span class='line'>  ktri KeyTransRecipientInfo,
</span><span class='line'>  kari [1] KeyAgreeRecipientInfo,
</span><span class='line'>  kekri [2] KEKRecipientInfo,
</span><span class='line'>  pwri [3] PasswordRecipientinfo,
</span><span class='line'>  ori [4] OtherRecipientInfo }</span></code></pre></td></tr></table></div></figure>


<h3>AuthenticatedData</h3>

<p>AuthenticatedData is the one that always trips me up, it allows you to send a message that is only verifiable by a number of specific recipients.
It generates a new MAC secret key and with it generates a MAC digest for the plaintext.
It then encrypts the MAC secret key to any number of recipients similar to EnvelopedData and includes the MAC in the message.
The message itself is not encrypted and can be retrieved, but you cannot assert the message integrity without being one of the explicit recipients.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthenticatedData ::= SEQUENCE {
</span><span class='line'>  version CMSVersion,
</span><span class='line'>  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
</span><span class='line'>  recipientInfos RecipientInfos,
</span><span class='line'>  macAlgorithm MessageAuthenticationCodeAlgorithm,
</span><span class='line'>  digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
</span><span class='line'>  encapContentInfo EncapsulatedContentInfo,
</span><span class='line'>  authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
</span><span class='line'>  mac MessageAuthenticationCode,
</span><span class='line'>  unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
