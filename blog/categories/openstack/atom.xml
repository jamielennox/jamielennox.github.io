<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openstack | jamielennox.net]]></title>
  <link href="http://www.jamielennox.net/blog/categories/openstack/atom.xml" rel="self"/>
  <link href="http://www.jamielennox.net/"/>
  <updated>2014-06-04T07:18:27+10:00</updated>
  <id>http://www.jamielennox.net/</id>
  <author>
    <name><![CDATA[Jamie Lennox]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[identity_uri in Auth Token Middleware]]></title>
    <link href="http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware/"/>
    <updated>2014-05-21T14:54:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware</id>
    <content type="html"><![CDATA[<p>As part of the 0.8 release of keystoneclient (2014-04-17) we made an update to the way that you configure auth_token middleware in OpenStack.</p>

<p>Previously you specify the path to the keystone server as a number of individual parameters such as:</p>

<p><code>
[keystone_authtoken]
auth_protocol = http
auth_port = 35357
auth_host = 127.0.0.1
auth_admin_prefix =
</code></p>

<p>This made sense in code when using httplib for communication where you use each of those independent pieces.
However we removed httplib a number of releases ago and now simply reconstruct the full URL in code in the form:</p>

<p><code>
%(auth_protocol)s://%(auth_host)s:%(auth_port)d/%(auth_admin_prefix)s
</code></p>

<p>This format is much more intuitive for configuration and so should now be used with the key <strong>identity_uri</strong>. e.g.</p>

<p><code>
[keystone_authtoken]
identity_uri = http://127.0.0.1:35357
</code></p>

<p>Using the original format will continue to work but you&rsquo;ll see a deprecation message like:</p>

<p><code>
WARNING keystoneclient.middleware.auth_token [-] Configuring admin URI using auth fragments. This is deprecated, use 'identity_uri' instead.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client Session Objects]]></title>
    <link href="http://www.jamielennox.net/blog/2014/02/24/client-session-objects/"/>
    <updated>2014-02-24T13:32:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/02/24/client-session-objects</id>
    <content type="html"><![CDATA[<p>Keystoneclient has recently introduced a <em>Session</em> object.
The concept was discussed and generally accepted at the Hong Kong Summit that keystoneclient as the root of authentication (and arguably security) should be responsible for transport (HTTP) and authentication across all the clients.</p>

<p>The majority of the functionality in this post is written and up for review but has <strong>not yet been committed</strong>.
I write this in an attempt to show the direction of clients as there is currently a lot of talk around projects such as the <a href="https://wiki.openstack.org/wiki/SDK-Development">OpenStack-SDK</a>.</p>

<p>When working with clients you would first create an authentication object, then create a session object with that authentication and then re-use that session object across all the clients you instantiate.</p>

<p>```python</p>

<p>from keystoneclient.auth.identity import v2
from keystoneclient import session
from keystoneclient.v2_0 import client</p>

<p>auth = v2.Password(auth_url=&lsquo;<a href="https://localhost:5000/v2.0">https://localhost:5000/v2.0</a>&rsquo;,</p>

<pre><code>               username='user',
               password='pass',
               tenant_name='demo')
</code></pre>

<p>sess = session.Session(auth=auth,</p>

<pre><code>                   verify='/path/to/ca.pem')
</code></pre>

<p>ksclient = client.Client(session=sess,</p>

<pre><code>                     region_name='RegionOne')
</code></pre>

<h1>other clients can be created sharing the sess parameter</h1>

<p>```</p>

<p>Now whenever you want to make an authenticated request you just indicated it as part of the request call.</p>

<p>```python</p>

<h1>requests with authenticated are sent with a token</h1>

<p>users = sess.get(&lsquo;<a href="http://localhost:35357/v2.0/users">http://localhost:35357/v2.0/users</a>&rsquo;,</p>

<pre><code>             authenticated=True)
</code></pre>

<p>```</p>

<p>This was pretty much the extent of the initial proposal, however in working with the plugins I have come to realize that authentication is responsible for much more than simply getting a token.</p>

<p>A large part of the data in a keystone token is the service catalog.
This is a listing of the services known to an OpenStack deployment and the URLs that we should use when accessing those services.
Because of the disjointed way in which clients have been developed this service catalog is parsed by each client to determine the URL with which to make API calls.</p>

<p>With a session object in control of authentication and the service catalog there is no reason for a client to know its URL, just what it wants to communicate.</p>

<p>```python</p>

<p>users = sess.get(&lsquo;/users&rsquo;,</p>

<pre><code>             authenticated=True,
             service_type='identity',
             endpoint_type='admin',
             region_name='RegionOne')
</code></pre>

<p>```</p>

<p>The values of <code>service_type</code> and <code>endpoint_type</code> are well known and constant to a client, <code>region_name</code> is generally passed in when instantiating (if required).
Requests made via the client object will have these parameters added automatically, so given the client from above the following call is exactly the same:</p>

<p>```python</p>

<p>users = ksclient.get(&lsquo;/users&rsquo;)</p>

<p>```</p>

<p>Where I feel that this will really begin to help though is in dealing with the transition between API versions.</p>

<p>Currently deployments of OpenStack put a versioned endpoint in the service catalog eg for identity <code>http://localhost:5000/v2.0</code>.
This made sense initially however now as we try to transition people to the V3 identity API we find that there is no backwards compatible way to advertise both the v2 and v3 services.
The agreed solution long-term is that entries in the service catalog should not be versioned eg. <code>http://localhost:5000</code> as the root path of a service will list the available versions.
So how do we handle this transition across the 8+ clients?
Easy:</p>

<p>```python</p>

<p>try:</p>

<pre><code>users = sess.get('/users',
                 authenticated=True,
                 service_type='identity',
                 endpoint_type='admin',
                 region_name='RegionOne',
                 version=(2, 0))  # just specify the version you need
</code></pre>

<p>except keystoneclient.exceptions.EndpointNotFound:</p>

<pre><code>logging.error('No v2 identity endpoint available', exc_info=True)
</code></pre>

<p>```</p>

<p>This solution also means that when we have a suitable hack for the transition to unversioned endpoints it needs only be implemented in one place.</p>

<p>Reliant on this is a means to discover the available versions of all the OpenStack services.
Turns out that in general the projects are similar enough in structure that it can be done with a few minor hacks.
For newer projects there is now a definitive specification <a href="https://wiki.openstack.org/wiki/VersionDiscovery">on the wiki</a>.</p>

<p>A major advantage of this common approach is we now have a standard way of determining whether a version of a project is available in this cloud.
Therefore we get client version discovery pretty much for free:</p>

<p>```python</p>

<p>if sess.is_available(service_type=&lsquo;identity&rsquo;,</p>

<pre><code>                 version=(2,0)):
ksclient = v2_0.client.Client(sess)
</code></pre>

<p>else:</p>

<pre><code>logging.error("Can't create a v2 identity client")
</code></pre>

<p>```</p>

<p>That&rsquo;s a little verbose as a client knows that information, so we can extract a wrapper:</p>

<p>```python</p>

<p>if v2_0.client.Client.is_available(sess):</p>

<pre><code>ksclient = v2_0.client.Client(sess)
</code></pre>

<p>```</p>

<p>or simply:</p>

<p>```python</p>

<p>ksclient = keystoneclient.client.Client(session=sess,</p>

<pre><code>                                    version=(2,0))
</code></pre>

<p>if ksclient:</p>

<pre><code># do stuff
</code></pre>

<p>```</p>

<p>So the session object has evolved from a pure transport level object and this departure is somewhat concerning as I don&rsquo;t like mixing layers of responsibility.
However in practice we have standardized on the <a href="http://www.python-requests.org">requests</a> library to abstract much of this away and the Session object is providing helpers around this.</p>

<p>So, along with standardizing transport, by using the session object like this we can:</p>

<ul>
<li>reduce the basic client down to an object consisting of a few variables indicating the service type and version required.</li>
<li>finally get a common service discovery mechanism for all the clients.</li>
<li>shift the problem of API version migration onto someone else &ndash; probably me.</li>
</ul>


<h4>Disclaimers and Notes</h4>

<ul>
<li><p>The examples provided above use keystoneclient and the &lsquo;identity&rsquo; service purely because this is what has been implemented so far.
In terms of CRUD operations keystoneclient is essentially the same as other client in that it retrieves its endpoint from the service catalog and issues requests to it, so the approach will work equally well.</p></li>
<li><p>Currently none of the other clients rely upon the session object, I have been waiting on the inclusion of authentication plugins and service discovery before making this push.</p></li>
<li><p>Region handling is still a little awkward when using the clients.
I blame this completely on the fact that region handling is awkward on the servers.
In Juno we should have hierarchical regions and then it may make sense to allow <code>region_name</code> to be set on a session rather than per client.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with .pyc]]></title>
    <link href="http://www.jamielennox.net/blog/2014/02/18/dealing-with-pyc/"/>
    <updated>2014-02-18T11:08:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/02/18/dealing-with-pyc</id>
    <content type="html"><![CDATA[<p>I have often found that when dealing with multiple branches and refactoring patches I get caught out by left over *.pyc files from python files that don&rsquo;t exist on this branch.
This bit me again recently so I went looking for options.</p>

<p>A useful environment variable that I found via some stackoverflow questions is: <a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE">PYTHONDONTWRITEBYTECODE</a> which, when set, prevents python from writing .pyc and .pyo files.
This is not something that I want to set permanently on my machine but is great for development.</p>

<p>The other tool I use for all my python projects is <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> which allows you to isolate project dependencies and environments in what I think is a more intuitive way than with virtualenv directly.</p>

<p>Armed with the simple idea that these two concepts should be able to work together I found I was not the first person to think of this.
There are other guides out there but the basic concept is simply to set PYTHONDONTWRITEBYTECODE when we activate a virtualenv and reset it when we deactivate it.</p>

<p>Easy.</p>

<p>Add to <em>~/.virtualenvs/postactivate</em>:</p>

<p><code>bash
export _PYTHONDONTWRITEBYTECODE=$PYTHONDONTWRITEBYTECODE
export PYTHONDONTWRITEBYTECODE=1
</code></p>

<p>Add to <em>~/.virtualenvs/predeactivate</em>:</p>

<p><code>bash
export PYTHONDONTWRITEBYTECODE=$_PYTHONDONTWRITEBYTECODE
unset _PYTHONDONTWRITEBYETCODE
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keystone Token Binding]]></title>
    <link href="http://www.jamielennox.net/blog/2013/10/22/keystone-token-binding/"/>
    <updated>2013-10-22T11:48:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2013/10/22/keystone-token-binding</id>
    <content type="html"><![CDATA[<p>With the Havana release of OpenStack, Keystone gains the ability to issue and verify tokens &ldquo;bound&rdquo; to some authentication mechanism.
To understand the reason for this feature we need to first consider the security model of the current token architecture.</p>

<p>OpenStack tokens are what we call &ldquo;bearer tokens&rdquo;.
The term seems to have come out of the OAuth movement but means that whoever has the token has all the rights associated with that person.
This is not an uncommon situation on the Internet, it is the way basic auth (username and password), cookies, and session ids all work, and one of the reasons that SSL is so important when authenticating against a website.
If an attacker was to get your token then they have all the rights of that token for as long as it is valid, including permission to reissue a token or change your password.
While all of these mechanism are symmetric secrets, they are only shared between two end points.
Keystone tokens are shared across all of the public services in an OpensStack deployment.</p>

<p>As OpenStack grows and this token is presented to an ever increasing list of services the vulnerability of this mechanism increases.
So what can we do about it?
The typical answer, particularly for the enterprise, is to use Kerberos or x509 client certificates.
This is a great solution but we don&rsquo;t want to have each service dealing with different authentication mechanisms, that&rsquo;s what Keystone does.</p>

<h2>What is a &ldquo;bound token&rdquo;?</h2>

<p>A &ldquo;bound token&rdquo; is a regular keystone token with some additional information that indicates that the token may only be used in conjunction with the specified external authentication mechanism.
Taking the example of Kerberos, when a token is issued Keystone embeds the name of the Kerberos principle into the token.
When this token is then presented to another service the service notices the bind information and ensures that Kerberos authentication was used and that the same user is making the request.</p>

<p>So how does this help to protect token hijacking?
To give an example:</p>

<ol>
<li> Alice connects to Keystone using her Kerberos credentials and gets a token.
 Embedded within this token is her Kerberos principal name <code>alice@ACME.COM</code>.</li>
<li> Alice authenticates to HaaS (hacked as a service) using her token and Kerberos credentials and is allowed to perform her operations.</li>
<li> Bob, who has privileged access to HaaS, records the token that Alice presented to the service (or otherwise gets Alice&rsquo;s token)</li>
<li> Bob attempts to connect to Keystone as Alice to change her password.
 He connects to keystone with his own Kerberos credentials <code>bob@ACME.COM</code>.
 Because these credentials do not match the ones that were present when the token was created his access is disallowed.</li>
</ol>


<p>It does not necessarily mean that the user initially authenticated themselves by there Kerberos credentials, they may have used there regular username and password.
It simply means that the user who created the token has said that they are also the owner of this Kerberos principal (note: that it is tied to the principal, not a ticket so it will survive ticket re-issuing) and the token should not be authenticated in future without it present.</p>

<h2>What is implemented?</h2>

<p>Currently tokens issued from Keystone can be bound to a Kerberos principal.
Extending this mechanism to x509 client certificates should be a fairly simple exercise but will not be included in the Havana release.</p>

<p>A patch to handle bind checking in auth_token middleware is currently under review to bring checking to other services.</p>

<p>There are however a number of problems with enforcing bound tokens today:</p>

<ul>
<li>Kerberos authentication is not supported by the eventlet http server (the server that drives most of the OpenStack web services), and so there is no way to authenticate to the server to provide the credentials.
This essentially restricts bind checking to services running in httpd, which to the best of my knowledge is currently only keystone and swift.</li>
<li>None of the clients currently support connecting with Kerberos authentication.
The option was added to Keystoneclient as a proof of concept but I am hoping that this can be solved across all clients by standardizing the way they communicate rather than having to add and maintain support in each individual client.
There will also be the issue of how to configure the servers to use these clients correctly.</li>
<li>Kerberos tickets are issued to users, not hosts, and typically expire after a period of time.
To allow unattended servers to have valid Kerberos credentials requires a way of automatically refreshing or fetching new tickets.
I am told that there is support for this scenario coming in Fedora 20 but I am not sure what it will involve.</li>
</ul>


<h2>Configuring Token Binding</h2>

<p>The new argument to enable token binding in <code>keystone.conf</code> is:</p>

<pre><code>[token]

# External auth mechanisms that should add bind information to token.
# eg kerberos, x509
bind = kerberos
</code></pre>

<p>As mentioned currently only the value Kerberos is currently supported here.
One of the next supported mechanisms will be x509 client certificates.</p>

<p>To enable token bind authentication in <code>keystone.conf</code> is:</p>

<pre><code>[token]
# Enforcement policy on tokens presented to keystone with bind information.
# One of disabled, permissive, strict, required or a specifically required bind
# mode e.g. kerberos or x509 to require binding to that authentication.
enforce_token_bind = permissive
</code></pre>

<p>As illustrated by the comments the possible values here are:</p>

<ul>
<li><code>disabled</code>: Disables token bind checking.</li>
<li><code>permissive</code>: Token bind information will be verified if present.
 If there is bind information for a token and the server does not know how to verify that information then it will be ignored and the token will be allowed.
 This is the new default value and should have no effect on existing systems.</li>
<li><code>strict</code>: Like permissive but if unknown bind information is present then the token will be rejected.</li>
<li><code>required</code>: Tokens will only be allowed if bind information is present and verified.</li>
<li>A specific form of bind information is present and verified.
The only currently available value here is <code>kerberos</code> indicating that a token must be bound to a Kerberos principal to be accepted.</li>
</ul>


<h2>In Conclusion</h2>

<p>For a deployment with access to a Kerberos or x509 infrastructure token binding will dramatically increase your user&rsquo;s security.
Unfortunately the limitations of Kerberos within OpenStack don&rsquo;t really make this a viable deployment option in Havana.
Watch this space however as we add x509 authentication and binding, and improve Kerberos handling throughout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keystone with HTTPd in devstack]]></title>
    <link href="http://www.jamielennox.net/blog/2013/09/30/keystone-with-httpd-in-devstack/"/>
    <updated>2013-09-30T13:53:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2013/09/30/keystone-with-httpd-in-devstack</id>
    <content type="html"><![CDATA[<p>Keystone has been slowly pushing away from being deployed with <a href="http://eventlet.net">Eventlet</a> and the <code>keystone-all</code> script in favour of the more traditional httpd mod_wsgi application method.
There has been discussion of Eventlet&rsquo;s place in OpenStack <a href="http://davidhadas.wordpress.com/2012/05/14/asynchronousio/">before</a> and its (mis)use has led to numerous subtle bugs and problems, however from my opinion in Keystone the most important reasons to move away from Eventlet are:</p>

<ul>
<li>Eventlet does not support Kerberos authentication.</li>
<li>pyOpenSSL only releases the GIL around some SSL verification commands.
This leads to a series of hacks to prevent long running crypto commands blocking Eventlet threads and thus the entire Keystone process.</li>
<li>There are already a lot of httpd authentication/authorization plugins that we could make use of in Keystone.</li>
<li>It&rsquo;s faster to have things handled by httpd modules in C than in Python.</li>
</ul>


<p>Keystone has shipped with sample WSGI scripts and httpd configuration files since Foslom and documentation for how to use them <a href="http://docs.openstack.org/developer/keystone/apache-httpd.html">is available</a> however most guides and service wrappers (upstart, systemd etc) will use the <code>keystone-all</code> method.</p>

<p>To get some wider adoption and understanding of the process I&rsquo;ve just added Keystone with httpd support into devstack.
Simply set:
<code>
APACHE_ENABLED_SERVICES=key
</code>
in your localrc or environment variables and re-run <code>./stack.sh</code> to try it out.</p>

<p>P.S. Swift can also be deployed this way by adding <code>swift</code> to the (comma separated) services list.</p>
]]></content>
  </entry>
  
</feed>
