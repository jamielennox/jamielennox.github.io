<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openstack | jamielennox.net]]></title>
  <link href="http://www.jamielennox.net/blog/categories/openstack/atom.xml" rel="self"/>
  <link href="http://www.jamielennox.net/"/>
  <updated>2014-09-15T12:36:21+10:00</updated>
  <id>http://www.jamielennox.net/</id>
  <author>
    <name><![CDATA[Jamie Lennox]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use keystoneclient Sessions]]></title>
    <link href="http://www.jamielennox.net/blog/2014/09/15/how-to-use-keystoneclient-sessions/"/>
    <updated>2014-09-15T09:13:36+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/09/15/how-to-use-keystoneclient-sessions</id>
    <content type="html"><![CDATA[<p>In the last post I did on keystoneclient sessions there was a lot of hand waving about how they should work but it&rsquo;s not merged yet.
Standardizing clients has received some more attention again recently - and now that the sessions are more mature and ready it seems like a good opportunity to explain them and how to use them again.</p>

<p>For those of you new to this area the clients have grown very organically, generally forking off some existing client and adding and removing features in ways that worked for that project.
Whilst this is in general a problem for user experience (try to get one token and use it with multiple clients without reauthenticating) it is a nightmare for security fixes and new features as they need to be applied individually across each client.</p>

<p>Sessions are an attempt to extract a common authentication and communication layer from the existing clients so that we can handle transport security once, and keystone and deployments can add new authentication mechanisms without having to do it for every client.</p>

<h2>The Basics</h2>

<p>Sessions and authentications are user facing objects that you create and pass to a client, they are public objects not a framework for the existing clients.
They require a change in how you instantiate clients.</p>

<p>The first step is to create an authentication plugin, currently the available plugins are:</p>

<ul>
<li><code>keystoneclient.auth.identity.v2.Password</code></li>
<li><code>keystoneclient.auth.identity.v2.Token</code></li>
<li><code>keystoneclient.auth.identity.v3.Password</code></li>
<li><code>keystoneclient.auth.identity.v3.Token</code></li>
<li><code>keystoneclient.auth.token_endpoint.Token</code></li>
</ul>


<p>For the primary user/password and token authentication mechanisms that keystone supports in v2 and v3 and for the test case where you know the endpoint and token in advance.
The parameters will vary depending upon what is required to authenticate with each.</p>

<p>Plugins don&rsquo;t need to live in the keystoneclient, we are currently in the process of setting up a new repository for kerberos authentication so that it will be an optional dependency.
There are also some plugins living in the contrib section of keystoneclient for federation that will also likely be moved to a new repository soon.</p>

<p>You can then create a session with that plugin.</p>

<pre><code class="python">
from keystoneclient import session as ksc_session
from keystoneclient.auth.identity import v3
from keystoneclient.v3 import client as keystone_v3
from novaclient.v1_1 import client as nova_v2

auth = v3.Password(auth_url='http://keystone.host/v3',
                   username='user',
                   password='password',
                   project_name='demo',
                   user_domain_name='default',
                   project_domain_name='default')

session = ksc_session.Session(auth=auth,
                              verify='/path/to/ca.cert')

keystone = keystone_v3.Client(session=session)
nova = nova_v2.Client(session=session)
</code></pre>

<p>Keystone and nova clients will now share an authentication token fetched with keystone&rsquo;s v3 authentication.
The clients will authenticate on the first request and will re-authenticate automatically when the token expires.</p>

<p>This is a fundamental shift from the existing clients that would authenticate internally to the client and on creation so by opting to use sessions you are acknowledging that some methods won&rsquo;t work like they used to.
For example keystoneclient had an <code>authenticate()</code> function that would save the details of the authentication (user_id etc) on the client object.
This process is no longer controlled by keystoneclient and so this function should not be used, however it also cannot be removed because we need to remain backwards compatible with existing client code.</p>

<p>In converting the existing clients we consider that passing a Session means that you are acknowledging that you are using new code and are opting-in to the new behaviour.
This will not affect 90% of users who just make calls to the APIs, however if you have got hacks in place to share tokens between the existing clients or you overwrite variables on the clients to force different behaviours then these will probably be broken.</p>

<h2>Per-Client Authentication</h2>

<p>The above flow is useful for users where they want to have there one token shared between one or more clients.
If you are are an application that uses many authentication plugins (eg, heat or horizon) you may want to take advantage of using a single session&rsquo;s connection pooling or caching whilst juggling multiple authentications.
You can therefore create a session without an authentication plugin and specify the plugin that will be used with that client instance, for example:</p>

<pre><code class="python">global SESSION

if not SESSION:
    SESSION = ksc_session.Session()

auth = get_auth_plugin()  # you could deserialize it from a db,
                          # fetch it based on a cookie value...
keystone = keystone_v3.Client(session=SESSION, auth=auth)
</code></pre>

<p>Auth plugins set on the client will override any auth plugin set on the session - but I&rsquo;d recommend you pick one method based on your application&rsquo;s needs and stick with it.</p>

<h2>Loading from a config file</h2>

<p>There is support for loading session and authentication plugins from and oslo.config CONF object.
The documentation on exactly what options are supported is lacking right now and you will probably need to look at code to figure out everything that is supported.
I promise to improve this, but to get you started you need to register the options globally:</p>

<pre><code class="python">group = 'keystoneclient'  # the option group
keystoneclient.session.Session.register_conf_options(CONF, group)
keystoneclient.auth.register_conf_options(CONF, group)
</code></pre>

<p>And then load the objects where you need them:</p>

<pre><code class="python">auth = keystoneclient.auth.load_from_conf_options(CONF, group)
session = ksc_session.Session.load_from_conf_options(CONF, group, auth=auth)
keystone = keystone_v3.Client(session=session)
</code></pre>

<p>Will load options that look like:</p>

<pre><code class="ini">[keystoneclient]
cacert = /path/to/ca.cert
auth_plugin = v3password
username = user
password = password
project_name = demo
project_domain_name = default
user_domain_name = default
</code></pre>

<p>There is also support for transitioning existing code bases to new option names if they are not the same as what your application uses.</p>

<h2>Loading from CLI</h2>

<p>A very similar process is used to load sessions and plugins from an argparse parser.</p>

<pre><code class="python">
parser = argparse.ArgumentParser('test')

argv = sys.argv[1:]

keystoneclient.session.Session.register_cli_options(parser)
keystoneclient.auth.register_argparse_arguments(parser, argv)

args = parser.parse_args(argv)

auth = keystoneclient.auth.load_from_argparse_arguments(args)
session = keystoneclient.session.Session.load_from_cli_options(args,
                                                               auth=auth)
</code></pre>

<p>This produces an application with the following options:</p>

<pre><code class="bash">python test.py --os-auth-plugin v3password
usage: test [-h] [--insecure] [--os-cacert &lt;ca-certificate&gt;]
            [--os-cert &lt;certificate&gt;] [--os-key &lt;key&gt;] [--timeout &lt;seconds&gt;]
            [--os-auth-plugin &lt;name&gt;] [--os-auth-url OS_AUTH_URL]
            [--os-domain-id OS_DOMAIN_ID] [--os-domain-name OS_DOMAIN_NAME]
            [--os-project-id OS_PROJECT_ID]
            [--os-project-name OS_PROJECT_NAME]
            [--os-project-domain-id OS_PROJECT_DOMAIN_ID]
            [--os-project-domain-name OS_PROJECT_DOMAIN_NAME]
            [--os-trust-id OS_TRUST_ID] [--os-user-id OS_USER_ID]
            [--os-user-name OS_USERNAME]
            [--os-user-domain-id OS_USER_DOMAIN_ID]
            [--os-user-domain-name OS_USER_DOMAIN_NAME]
            [--os-password OS_PASSWORD]
</code></pre>

<p>There is an ongoing effort to create a standardized CLI plugin that can be used by new clients rather than have people provide an &ndash;os-auth-plugin every time.
It is not yet ready, however clients can create and specify there own default plugins if &ndash;os-auth-plugin is not provided.</p>

<h2>For Client Authors</h2>

<p>To make use of the session in your client there is the <code>keystoneclient.adapter.Adapter</code> which provides you with a set of standard variables that your client should take and use with the session.
The adapter will handle the per-client authentication plugins, handle <code>region_name</code>, <code>interface</code>, <code>user_agent</code> and similar client parameters that are not part of the more global (across many clients) state that sessions hold.</p>

<p>The basic client should look like:</p>

<pre><code>class MyClient(object):

    def __init__(self, **kwargs):
        kwargs.set_default('user_agent', 'python-myclient')
        kwargs.set_default('service_type', 'my')
        self.http = keystoneclient.adapter.Adapter(**kwargs)
</code></pre>

<p>The adapter then has <code>.get()</code> and <code>.post()</code> and other http methods that the clients expect.</p>

<h2>Conclusion</h2>

<p>It&rsquo;s great to have renewed interest in standardizing client behaviour, and I&rsquo;m thrilled to see better session adoption.
The code has matured to the point it is usable and simplifies use for both users and client authors.</p>

<p>In writing this I kept wanting to link out to official documentation and realized just how lacking it really is.
Some explanation is available on the <a href="http://docs.openstack.org/developer/python-keystoneclient/using-sessions.html">official python-keystoneclient docs pages</a>, there is also <a href="http://docs.openstack.org/developer/python-keystoneclient/api/keystoneclient.auth.identity.html">module documentation</a> however this is definetly an area in which we (read I) am a long way behind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[requests-mock]]></title>
    <link href="http://www.jamielennox.net/blog/2014/08/26/requests-mock/"/>
    <updated>2014-08-26T12:26:23+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/08/26/requests-mock</id>
    <content type="html"><![CDATA[<p>Having just release v0.5 of <a href="https://pypi.python.org/pypi/requests-mock">requests-mock</a> and having it used by both keystoneclient and novaclient with others in the works I thought I&rsquo;d finally do a post explaining what it is and how to use it.</p>

<h2>Motivation</h2>

<p>I was the person who brought <a href="http://falcao.it/HTTPretty/">HTTPretty</a> into the OpenStack requirements.</p>

<p>The initial reason for this was that keystoneclient was transitioning from the <a href="https://docs.python.org/2/library/httplib.html">httplib</a> library to <a href="http://docs.python-requests.org/en/latest/">requests</a> and I needed to prove that there was no changes to the HTTP requests during the transition.
HTTPretty is a way to mock HTTP responses at the socket level, so it is not dependant on the HTTP library you use and for this it was fairly successful.</p>

<p>As part of that transition I converted all the unit tests so that they actually traversed through to the requesting layer and found a number of edge case bugs because the responses were being mocked out above this point.
I have therefore advocated that the clients convert to mocking at the request layer rather than stubbing out returned values.
I&rsquo;m pretty sure that this doesn&rsquo;t adhere strictly to the unit testing philosophy of testing small isolated changes, but our client libraries aren&rsquo;t that deep and I&rsquo;d honestly prefer to just test the whole way through and find those edge cases.</p>

<p>Having done this has made it remarkably easier to transition to using sessions in the clients as well, because we are testing the whole path down to making HTTP requests for all the resource tests so again have assurances that the HTTP requests being sent are equivalent.</p>

<p>At the same time we&rsquo;ve had a number of problems with HTTPretty:</p>

<ul>
<li>It was the lingering last requirement for getting Python 3 support. Thanks to Cyril Roelandt for finally getting that fixed.</li>
<li>For various reasons it is difficult for the distributions to package.</li>
<li>It has a bad habit of doing backwards incompatible, or simply broken releases. The current requirements string is: <code>httpretty&gt;=0.8.0,!=0.8.1,!=0.8.2,!=0.8.3</code></li>
<li>Because it acts at the socket layer it doesn&rsquo;t always play nicely with other things using the socket. For example it has to be disabled for live memcache tests.</li>
<li>It pins its requirements on pypi.</li>
</ul>


<p>Now I feel like I&rsquo;m just ranting.
There are additional oddities I found in trying to fix these upstream but this is not about bashing HTTPretty.</p>

<h2>requests-mock</h2>

<p>requests-mock follows the same concepts allowing users to stub out responses to HTTP requests, however it specifically targets the requests library rather than stubbing the socket.
All the OpenStack clients have been converted to requests at this point, and for the general audience if you are writing HTTP code in Python you should be using requests.</p>

<p>Note: a lot of what is used in these examples is only available since the 0.5 release.
The current OpenStack requirements still have 0.4 so you&rsquo;ll need to wait for some of the new syntax.</p>

<p>The intention of requests-mock is to work in as similar way to requests itself as possible.
Hence all the variable names and conventions should be as close to a <code>requests.Response</code> as possible.
For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests_mock</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.google.com&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">text</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Not</span> <span class="n">really</span> <span class="n">google</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">218</span><span class="p">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="n">u</span><span class="o">&amp;</span><span class="c">#8217;Not really google&amp;#8217;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">218</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So <code>text</code> in the mock equates to <code>text</code> in the response and similarly for <code>status_code</code>.
Some more advanced usage of the requests library:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">world</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;},</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">header</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;})</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="n">u</span><span class="o">&amp;</span><span class="c">#8217;{&amp;ldquo;hello&amp;rdquo;: &amp;ldquo;world&amp;rdquo;}&amp;lsquo;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="n">u</span><span class="o">&amp;</span><span class="c">#8217;hello&amp;rsquo;: u&amp;#8217;world&amp;#8217;}</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">200</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">headers</span>
</span><span class='line'><span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">header</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">header</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also use callbacks to create responses dynamically:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="err">&lt;</span><span class="nf">em</span><span class="o">&gt;</span><span class="n">request_callback</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">context</span><span class="o">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="mi">201</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">context</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">header</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="k">return</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">request</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">}</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">with</span> <span class="n">requests_mock</span><span class="o">.</span><span class="n">mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">m</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">request_callback</span><span class="p">)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>     <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
</span><span class='line'><span class="mi">201</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">headers</span>
</span><span class='line'><span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">header</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="n">u</span><span class="o">&amp;</span><span class="c">#8217;request&amp;#8217;: u&amp;#8217;data&amp;#8217;}&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that because the callback was passed as the <code>json</code> parameter the return type is expected to be the same as if you had passed it as a predefined <code>json=blob</code> value.
If you wanted to return <code>text</code> the callback would be on the <code>text</code> parameter.</p>

<h2>Cool tricks</h2>

<p>So rather than give a lot of examples i&rsquo;ll just highlight some of the interesting things you can do with the library and how to do it.</p>

<ul>
<li>Queue mutliple responses for a url, each element of the list is interpreted as if they were <code>**kwargs</code> for a response.
In this case every request other than the first will get a 401 error:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="p">[{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">json</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="n">_request_callback</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">text</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Not</span> <span class="n">Allowed</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">status_code</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="mi">401</span><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>See the history of requests:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">request_history</span>  <span class="c"># all requests</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">last_request</span>  <span class="c"># the last request</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">call_count</span>  <span class="c"># number of requests</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">called</span>  <span class="c"># boolean, True if called</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>match on the only the URL path:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">only</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>match on any method:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>or match on any URL:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>match on headers that are part of the request (useful for distinguishing between multiple requests to the same URL):</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">request_headers</span><span class="o">=</span><span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">X</span><span class="o">-</span><span class="n">Auth</span><span class="o">-</span><span class="n">Token</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">XXXXX</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>be used as a function decorator</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requests_mock.mock</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_a_thing</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>   <span class="n">m</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">requests_mock</span><span class="o">.</span><span class="n">ANY</span><span class="p">,</span> <span class="n">text</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">resp</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Try it!</h2>

<p>There is a lot more it can do and if you want to know more you can check out:</p>

<ul>
<li><a href="http://requests-mock.readthedocs.org/">Read the Docs</a></li>
<li><a href="https://pypi.python.org/pypi/requests-mock">PyPi</a></li>
<li><a href="https://git.openstack.org/cgit/stackforge/requests-mock">git repository</a></li>
</ul>


<p>As a final selling point because it was built particularly around OpenStack needs it is:</p>

<ul>
<li>Easily integrated with the <a href="https://pypi.python.org/pypi/fixtures">fixtures</a> library.</li>
<li>Hosted on stackforge and reviewed via <a href="https://review.openstack.org/#/q/project:stackforge/requests-mock+is:open,n,z">Gerrit</a>.</li>
<li>Continuously tested against at least keystoneclient and novaclient to prevent backwards incompatible changes.</li>
<li>Accepted as part of OpenStack requirements.</li>
</ul>


<p>Patches and <a href="https://bugs.launchpad.net/requests-mock">bug reports</a> are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands for Messy People]]></title>
    <link href="http://www.jamielennox.net/blog/2014/08/15/git-commands-for-messy-people/"/>
    <updated>2014-08-15T10:59:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/08/15/git-commands-for-messy-people</id>
    <content type="html"><![CDATA[<p>I am terrible at keeping my git branches in order.
Particularly since I work across multiple machines and forget where things are I will often have multiple branches with different names being different versions of the same review.</p>

<p>On a project I work on frequently I currently have 71 local branches which are a mix of my code, some code reviews, and some branches that were for trialling ideas.
<a href="https://pypi.python.org/pypi/git-review">git review</a> at least prefixes branches it downloads with <code>review/</code> but that doesn&rsquo;t help to figure out what was happening with local branches labelled <code>auth</code> through <code>auth-4</code>.</p>

<p>However this post isn&rsquo;t about me fixing my terrible habit it&rsquo;s about two git commands which help me work with the mess.</p>

<p>The first is an alias which I called <code>branch-date</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>    <span class="na">branch-date</span> <span class="o">=</span> <span class="s">&amp;ldquo;!git for-each-ref &amp;ndash;sort=committerdate &amp;ndash;format=&amp;lsquo;%1B[32m%(committerdate:iso8601) %1B[34m%(committerdate:relative) %1B[0;m%(refname:short)&amp;rsquo; refs/heads/&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This gives a nicely formatted list of branches in the project sorted by the last time they were committed to and how long ago it was.
So if I know I&rsquo;m looking for a branch that I last worked on last week I can quickly locate those branches.</p>

<p><img class="&ldquo;basic-alignment center&rdquo;" src="/images/branch-date.png" title="&ldquo;Naming scheme win!&rdquo; &ldquo;List of branches ordered by date&rdquo;" ></p>

<p>The next is a script to figure out which of my branches have made it through review and have been merged upstream which I called <code>branch-merged</code>.</p>

<p>Using git you can already call <code>git branch --merged master</code> to determine which branches are fully merged into the <code>master</code> branch.
However this won&rsquo;t take into account if a later version of a review was merged, in which case I can probably get rid of that branch.</p>

<p>We can figure this out by using the <code>Commit-Id:</code> field of our Gerrit reviews.</p>

<p><div><script src='https://gist.github.com/a7f8080e42ec795945b8.js?file=git-branch-merged.sh'></script>
<noscript><pre><code>#!/bin/bash

# create an associative array of all the changes
declare -A MERGED
for commit in `git log master | grep Change-Id | cut -d : -f 2`; do
    MERGED[&quot;$commit&quot;]=1
done

for branch in `git branch | grep -v master`; do
    found=1

    # for every commit on the branch check to ensure its in master
    for commit in `git log $branch | grep Change-Id | cut -d : -f 2`; do
        if [[ ! ${MERGED[&quot;$commit&quot;]} ]]; then
            # if it's not in master then this branch wasn't merged so we
            # want to break out and not print its name.
            found=0
            break
        fi
    done

    if [ $found = 1 ]; then
        # if all of the Commit-Ids on branch were also in master then
        # print out the branch name because we can probably get rid of it
        echo $branch
    fi
done</code></pre></noscript></div>
</p>

<p>So print out the branches where all the <code>Commit-Id</code>s are also in master.
It&rsquo;s not greatly efficient and if you are working with code bases with long histories you might need to limit the depth, but given that it doesn&rsquo;t run often it completes quickly enough.</p>

<p>There&rsquo;s no guarantee that there wasn&rsquo;t something new in those branches, but most likely it was an earlier review or test code that is no longer relevant.
I was considering a tool that could use the <code>Commit-Id</code> to figure out from gerrit if a branch is an exact match to one that was previously up for review and so contained no possibly useful experimenting code, but teaching myself to clean up branches as I go is probably a better use of my time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[identity_uri in Auth Token Middleware]]></title>
    <link href="http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware/"/>
    <updated>2014-05-21T14:54:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/05/21/identity-uri-in-auth-token-middleware</id>
    <content type="html"><![CDATA[<p>As part of the 0.8 release of keystoneclient (2014-04-17) we made an update to the way that you configure auth_token middleware in OpenStack.</p>

<p>Previously you specify the path to the keystone server as a number of individual parameters such as:</p>

<pre><code>[keystone_authtoken]
auth_protocol = http
auth_port = 35357
auth_host = 127.0.0.1
auth_admin_prefix =
</code></pre>

<p>This made sense in code when using httplib for communication where you use each of those independent pieces.
However we removed httplib a number of releases ago and now simply reconstruct the full URL in code in the form:</p>

<pre><code>%(auth_protocol)s://%(auth_host)s:%(auth_port)d/%(auth_admin_prefix)s
</code></pre>

<p>This format is much more intuitive for configuration and so should now be used with the key <strong>identity_uri</strong>. e.g.</p>

<pre><code>[keystone_authtoken]
identity_uri = http://127.0.0.1:35357
</code></pre>

<p>Using the original format will continue to work but you&rsquo;ll see a deprecation message like:</p>

<pre><code>WARNING keystoneclient.middleware.auth_token [-] Configuring admin URI using auth fragments. This is deprecated, use 'identity_uri' instead.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client Session Objects]]></title>
    <link href="http://www.jamielennox.net/blog/2014/02/24/client-session-objects/"/>
    <updated>2014-02-24T13:32:00+10:00</updated>
    <id>http://www.jamielennox.net/blog/2014/02/24/client-session-objects</id>
    <content type="html"><![CDATA[<p>Keystoneclient has recently introduced a <em>Session</em> object.
The concept was discussed and generally accepted at the Hong Kong Summit that keystoneclient as the root of authentication (and arguably security) should be responsible for transport (HTTP) and authentication across all the clients.</p>

<p>The majority of the functionality in this post is written and up for review but has <strong>not yet been committed</strong>.
I write this in an attempt to show the direction of clients as there is currently a lot of talk around projects such as the <a href="https://wiki.openstack.org/wiki/SDK-Development">OpenStack-SDK</a>.</p>

<p>When working with clients you would first create an authentication object, then create a session object with that authentication and then re-use that session object across all the clients you instantiate.</p>

<pre><code class="python">
from keystoneclient.auth.identity import v2
from keystoneclient import session
from keystoneclient.v2_0 import client

auth = v2.Password(auth_url='https://localhost:5000/v2.0',
                   username='user',
                   password='pass',
                   tenant_name='demo')

sess = session.Session(auth=auth,
                       verify='/path/to/ca.pem')

ksclient = client.Client(session=sess,
                         region_name='RegionOne')
# other clients can be created sharing the sess parameter
</code></pre>

<p>Now whenever you want to make an authenticated request you just indicated it as part of the request call.</p>

<pre><code class="python">
# requests with authenticated are sent with a token
users = sess.get('http://localhost:35357/v2.0/users',
                 authenticated=True)
</code></pre>

<p>This was pretty much the extent of the initial proposal, however in working with the plugins I have come to realize that authentication is responsible for much more than simply getting a token.</p>

<p>A large part of the data in a keystone token is the service catalog.
This is a listing of the services known to an OpenStack deployment and the URLs that we should use when accessing those services.
Because of the disjointed way in which clients have been developed this service catalog is parsed by each client to determine the URL with which to make API calls.</p>

<p>With a session object in control of authentication and the service catalog there is no reason for a client to know its URL, just what it wants to communicate.</p>

<pre><code class="python">
users = sess.get('/users',
                 authenticated=True,
                 service_type='identity',
                 endpoint_type='admin',
                 region_name='RegionOne')
</code></pre>

<p>The values of <code>service_type</code> and <code>endpoint_type</code> are well known and constant to a client, <code>region_name</code> is generally passed in when instantiating (if required).
Requests made via the client object will have these parameters added automatically, so given the client from above the following call is exactly the same:</p>

<pre><code class="python">
users = ksclient.get('/users')
</code></pre>

<p>Where I feel that this will really begin to help though is in dealing with the transition between API versions.</p>

<p>Currently deployments of OpenStack put a versioned endpoint in the service catalog eg for identity <code>http://localhost:5000/v2.0</code>.
This made sense initially however now as we try to transition people to the V3 identity API we find that there is no backwards compatible way to advertise both the v2 and v3 services.
The agreed solution long-term is that entries in the service catalog should not be versioned eg. <code>http://localhost:5000</code> as the root path of a service will list the available versions.
So how do we handle this transition across the 8+ clients?
Easy:</p>

<pre><code class="python">
try:
    users = sess.get('/users',
                     authenticated=True,
                     service_type='identity',
                     endpoint_type='admin',
                     region_name='RegionOne',
                     version=(2, 0))  # just specify the version you need
except keystoneclient.exceptions.EndpointNotFound:
    logging.error('No v2 identity endpoint available', exc_info=True)
</code></pre>

<p>This solution also means that when we have a suitable hack for the transition to unversioned endpoints it needs only be implemented in one place.</p>

<p>Reliant on this is a means to discover the available versions of all the OpenStack services.
Turns out that in general the projects are similar enough in structure that it can be done with a few minor hacks.
For newer projects there is now a definitive specification <a href="https://wiki.openstack.org/wiki/VersionDiscovery">on the wiki</a>.</p>

<p>A major advantage of this common approach is we now have a standard way of determining whether a version of a project is available in this cloud.
Therefore we get client version discovery pretty much for free:</p>

<pre><code class="python">
if sess.is_available(service_type='identity',
                     version=(2,0)):
    ksclient = v2_0.client.Client(sess)
else:
    logging.error("Can't create a v2 identity client")
</code></pre>

<p>That&rsquo;s a little verbose as a client knows that information, so we can extract a wrapper:</p>

<pre><code class="python">
if v2_0.client.Client.is_available(sess):
    ksclient = v2_0.client.Client(sess)
</code></pre>

<p>or simply:</p>

<pre><code class="python">
ksclient = keystoneclient.client.Client(session=sess,
                                        version=(2,0))
if ksclient:
    # do stuff
</code></pre>

<p>So the session object has evolved from a pure transport level object and this departure is somewhat concerning as I don&rsquo;t like mixing layers of responsibility.
However in practice we have standardized on the <a href="http://www.python-requests.org">requests</a> library to abstract much of this away and the Session object is providing helpers around this.</p>

<p>So, along with standardizing transport, by using the session object like this we can:</p>

<ul>
<li>reduce the basic client down to an object consisting of a few variables indicating the service type and version required.</li>
<li>finally get a common service discovery mechanism for all the clients.</li>
<li>shift the problem of API version migration onto someone else - probably me.</li>
</ul>


<h4>Disclaimers and Notes</h4>

<ul>
<li><p>The examples provided above use keystoneclient and the &lsquo;identity&rsquo; service purely because this is what has been implemented so far.
In terms of CRUD operations keystoneclient is essentially the same as other client in that it retrieves its endpoint from the service catalog and issues requests to it, so the approach will work equally well.</p></li>
<li><p>Currently none of the other clients rely upon the session object, I have been waiting on the inclusion of authentication plugins and service discovery before making this push.</p></li>
<li><p>Region handling is still a little awkward when using the clients.
I blame this completely on the fact that region handling is awkward on the servers.
In Juno we should have hierarchical regions and then it may make sense to allow <code>region_name</code> to be set on a session rather than per client.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
